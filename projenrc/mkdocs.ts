/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
import { Component, Project } from 'projen';
import { GitHub } from 'projen/lib/github';
import { JobPermission } from 'projen/lib/github/workflows-model';
import { AwsCdkTypeScriptWorkspace } from './awscdk-typescript-workspace';
import path from 'path';

/**
 * Options for GitHub Pages configuration.
 */
export interface GitHubOptions {
  /**
   * Name of the GitHub workflow.
   * @default 'docs'
   */
  readonly workflowName?: string;
}

/**
 * Options for copying autogenerated docgen API.md files to destination location.
 */
export interface DocgenApiReferencesOptions {

  /**
   * Name of the task to copy API.md documentation over to the target path
   * @default 'mkdocs:doccopy'
   */
  readonly taskName?: string;

  /**
   * Array of AWS CDK TypeScript workspace projects to copy API documentation from.
   */
  readonly projects: AwsCdkTypeScriptWorkspace[];

  /**
   * Target path for the copied API documentation files.
   */
  readonly targetPath: string;
}

/**
 * Options for MkDocs component.
 */
export interface MkDocsOptions {
  /**
   * Path to the documentation directory.
   */
  readonly path: string;

  /**
   * Whether to enable GitHub Pages deployment.
   * @default true
   */
  readonly github?: boolean;

  /**
   * GitHub Pages configuration options.
   */
  readonly githubOptions?: GitHubOptions;

  /**
   * Options for copying autogenerated docgen API.md files to destination location.
   */
  readonly docgenApiReferences?: DocgenApiReferencesOptions;
}

/**
 * Projen component that handles MkDocs documentation with optional GitHub Pages deployment and API reference generation.
 */
export class MkDocs extends Component {
  constructor(project: Project, options: MkDocsOptions) {
    super(project);

    // Add GitHub Pages workflow if enabled
    if (options.github !== false) {
      const gh = GitHub.of(project);

      if (!gh) {
        throw new Error('MkDocs component with GitHub Pages requires GitHub to be enabled on the project');
      }

      const docsWfl = gh.addWorkflow(options.githubOptions?.workflowName ?? 'docs');

      docsWfl.on({
        push: { branches: ['main'] },
        pullRequest: { branches: ['main'] },
        workflowDispatch: {}
      });

      docsWfl.addJob('build', {
        runsOn: ['ubuntu-latest'],
        permissions: {
          contents: JobPermission.READ,
          pages: JobPermission.WRITE,
          idToken: JobPermission.WRITE
        },
        steps: [
          {
            uses: 'actions/checkout@v4',
            with: { fetchDepth: 0 }
          },
          {
            name: 'Setup Python',
            uses: 'actions/setup-python@v4',
            with: { 'python-version': '3.x' }
          },
          {
            name: 'Install dependencies',
            run: `pip install -r ${options.path}/requirements.txt`
          },
          {
            name: 'Build documentation',
            run: `cd ${options.path} && mkdocs build`
          },
          {
            name: 'Upload Pages artifact',
            uses: 'actions/upload-pages-artifact@v3',
            with: { path: `${options.path}/site` }
          }
        ]
      });

      docsWfl.addJob('deploy', {
        if: "github.ref == 'refs/heads/main'",
        environment: {
          name: 'github-pages',
          url: '${{ steps.deployment.outputs.page_url }}'
        },
        runsOn: ['ubuntu-latest'],
        needs: ['build'],
        permissions: {
          contents: JobPermission.READ,
          pages: JobPermission.WRITE,
          idToken: JobPermission.WRITE
        },
        steps: [
          {
            name: 'Deploy to GitHub Pages',
            id: 'deployment',
            uses: 'actions/deploy-pages@v4'
          }
        ]
      });
    }

    // Add API documentation copy functionality if configured
    if (options.docgenApiReferences) {
      options.docgenApiReferences.projects.forEach(project => {
        const docgenTask = project.tasks.tryFind('docgen');
        if (!docgenTask) {
          throw new Error(`Project ${project.name} does not have a docgen task, which is required for docgenApiReferences functionality`);
        }

        const packageName = project.name;
        const apiFileName = `${packageName.split('/')[1]}-api.md`;
        const relativePath = path.relative(project.srcdir, path.join('..', '..', options.docgenApiReferences!.targetPath));

        const docCopyTask = project.tasks.addTask(options.docgenApiReferences?.taskName ?? 'mkdocs:doccopy', {
          steps: [
            { exec: `mkdir -p ${relativePath}` },
            { exec: `echo "# ${packageName}" > ${relativePath}/${apiFileName}` },
            { exec: `tail -n +2 API.md >> ${relativePath}/${apiFileName}` }
          ]
        })

        project.postCompileTask.spawn(docCopyTask);
      });
    }
  }
}
