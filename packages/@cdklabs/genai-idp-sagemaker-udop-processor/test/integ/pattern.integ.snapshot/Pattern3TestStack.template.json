{
 "Resources": {
  "InputBucket3BF8630A": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "InputBucketPolicy84EF9809": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "InputBucket3BF8630A"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "InputBucket3BF8630A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InputBucket3BF8630A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "InputBucketAutoDeleteObjectsCustomResourceE0706273": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "InputBucket3BF8630A"
    }
   },
   "DependsOn": [
    "InputBucketPolicy84EF9809"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "InputBucketNotificationsA82F925B": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "InputBucket3BF8630A"
    },
    "NotificationConfiguration": {
     "EventBridgeConfiguration": {}
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "InputBucketPolicy84EF9809"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "InputBucket3BF8630A"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WorkingBucketAF106285": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WorkingBucketPolicyDDFDAE47": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "WorkingBucketAF106285"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WorkingBucketAutoDeleteObjectsCustomResource6D7DB78E": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "WorkingBucketAF106285"
    }
   },
   "DependsOn": [
    "WorkingBucketPolicyDDFDAE47"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "OutputBucket7114EB27": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "OutputBucketPolicyAE009DDC": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "OutputBucket7114EB27"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "OutputBucketAutoDeleteObjectsCustomResource6C7A161F": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "OutputBucket7114EB27"
    }
   },
   "DependsOn": [
    "OutputBucketPolicyAE009DDC"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentConcurrencyTableE6976F31": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "counter_id",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "counter_id",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaServiceRole796A836E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaServiceRoleDefaultPolicy63CB12D0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConcurrencyTableE6976F31",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaServiceRoleDefaultPolicy63CB12D0",
    "Roles": [
     {
      "Ref": "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaServiceRole796A836E"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaB87539A8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "288988c410aa3beaf787b16d6aae259412caf443425f107b69a700783c9c77ae.zip"
    },
    "Environment": {
     "Variables": {
      "CONCURRENCY_TABLE": {
       "Ref": "EnvironmentConcurrencyTableE6976F31"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaServiceRole796A836E",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaServiceRoleDefaultPolicy63CB12D0",
    "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaServiceRole796A836E"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentConcurrencyTableInitializeConcurrencyTableCustomResource9AAD570D": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "EnvironmentConcurrencyTableInitializeConcurrencyTableLambdaB87539A8",
      "Arn"
     ]
    },
    "TableName": {
     "Ref": "EnvironmentConcurrencyTableE6976F31"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentTrackingTable97AE1FE4": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "PK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "SK",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "PK",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "SK",
      "KeyType": "RANGE"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    },
    "TimeToLiveSpecification": {
     "AttributeName": "ExpiresAfter",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentConfigurationTableFFC21CA7": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "Configuration",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "Configuration",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentUpdateConfigurationFunctionServiceRole6FF8673E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentUpdateConfigurationFunctionServiceRoleDefaultPolicyC83238DE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConfigurationTableFFC21CA7",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EnvironmentUpdateConfigurationFunctionServiceRoleDefaultPolicyC83238DE",
    "Roles": [
     {
      "Ref": "EnvironmentUpdateConfigurationFunctionServiceRole6FF8673E"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentUpdateConfigurationFunctionD5138FA8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "97c23f175fd4124257ca485e69da70cac3263d6d3edbb5b4d770c7bb7c041fed.zip"
    },
    "Environment": {
     "Variables": {
      "CONFIGURATION_TABLE_NAME": {
       "Ref": "EnvironmentConfigurationTableFFC21CA7"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "EnvironmentUpdateConfigurationFunctionServiceRole6FF8673E",
      "Arn"
     ]
    },
    "Runtime": "python3.12"
   },
   "DependsOn": [
    "EnvironmentUpdateConfigurationFunctionServiceRoleDefaultPolicyC83238DE",
    "EnvironmentUpdateConfigurationFunctionServiceRole6FF8673E"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentDocumentQueueDLQAF00F989": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 345600,
    "VisibilityTimeout": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentDocumentQueue95D3B000": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 86400,
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "EnvironmentDocumentQueueDLQAF00F989",
       "Arn"
      ]
     },
     "maxReceiveCount": 1000
    },
    "VisibilityTimeout": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentQueueSenderDLQ1F4F987B": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 345600,
    "VisibilityTimeout": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentQueueSenderLogGroup00DE2882": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentQueueSenderServiceRoleAE73D9E0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentQueueSenderServiceRoleDefaultPolicy50341F3F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EnvironmentQueueSenderDLQ1F4F987B",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "sqs:SendMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EnvironmentDocumentQueue95D3B000",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EnvironmentQueueSenderServiceRoleDefaultPolicy50341F3F",
    "Roles": [
     {
      "Ref": "EnvironmentQueueSenderServiceRoleAE73D9E0"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentQueueSender29E9D2B0": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "8695970a5d049bf99d33f851d7a2869a25e3e5b0ef75a0dbb505ff7767a7a8a5.zip"
    },
    "DeadLetterConfig": {
     "TargetArn": {
      "Fn::GetAtt": [
       "EnvironmentQueueSenderDLQ1F4F987B",
       "Arn"
      ]
     }
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "INFO",
      "QUEUE_URL": {
       "Ref": "EnvironmentDocumentQueue95D3B000"
      },
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "DATA_RETENTION_IN_DAYS": "365",
      "OUTPUT_BUCKET": {
       "Ref": "OutputBucket7114EB27"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer2260994d588C4C0A"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "EnvironmentQueueSenderLogGroup00DE2882"
     }
    },
    "Role": {
     "Fn::GetAtt": [
      "EnvironmentQueueSenderServiceRoleAE73D9E0",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "EnvironmentQueueSenderServiceRoleDefaultPolicy50341F3F",
    "EnvironmentQueueSenderServiceRoleAE73D9E0"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentWorkflowTrackerDLQ233E7165": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 345600,
    "VisibilityTimeout": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentWorkflowTrackerLogGroup26002ADA": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentWorkflowTrackerServiceRole9CEC777F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentWorkflowTrackerServiceRoleDefaultPolicy054BF2B3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EnvironmentWorkflowTrackerDLQ233E7165",
         "Arn"
        ]
       }
      },
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConcurrencyTableE6976F31",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EnvironmentWorkflowTrackerServiceRoleDefaultPolicy054BF2B3",
    "Roles": [
     {
      "Ref": "EnvironmentWorkflowTrackerServiceRole9CEC777F"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentWorkflowTrackerFC27ADDE": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "cb4dc67ec5a0a057f9fdd093c8cf2e2b86dce8d46858e978a64d98d71189d20f.zip"
    },
    "DeadLetterConfig": {
     "TargetArn": {
      "Fn::GetAtt": [
       "EnvironmentWorkflowTrackerDLQ233E7165",
       "Arn"
      ]
     }
    },
    "Environment": {
     "Variables": {
      "CONCURRENCY_TABLE": {
       "Ref": "EnvironmentConcurrencyTableE6976F31"
      },
      "METRIC_NAMESPACE": "Pattern3TestStack",
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "OUTPUT_BUCKET": {
       "Ref": "OutputBucket7114EB27"
      },
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer2260994d588C4C0A"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "EnvironmentWorkflowTrackerLogGroup26002ADA"
     }
    },
    "Role": {
     "Fn::GetAtt": [
      "EnvironmentWorkflowTrackerServiceRole9CEC777F",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "EnvironmentWorkflowTrackerServiceRoleDefaultPolicy054BF2B3",
    "EnvironmentWorkflowTrackerServiceRole9CEC777F"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentLookupFunctionLogGroup0CA6EDAD": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentLookupFunctionServiceRole35D8AFE5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentLookupFunctionServiceRoleDefaultPolicyC9624093": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "states:ListExecutions",
        "states:ListStateMachines"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "ProcessorDocumentProcessingStateMachineE572AD61"
       }
      },
      {
       "Action": [
        "states:DescribeExecution",
        "states:DescribeStateMachineForExecution",
        "states:GetExecutionHistory"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":states:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":execution:",
          {
           "Fn::Select": [
            6,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ProcessorDocumentProcessingStateMachineE572AD61"
              }
             ]
            }
           ]
          },
          ":*"
         ]
        ]
       }
      },
      {
       "Action": [
        "states:ListActivities",
        "states:DescribeStateMachine",
        "states:DescribeActivity"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EnvironmentLookupFunctionServiceRoleDefaultPolicyC9624093",
    "Roles": [
     {
      "Ref": "EnvironmentLookupFunctionServiceRole35D8AFE5"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EnvironmentLookupFunction9061F580": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "46c28c6b174ac9d8f20c64212c538455a40080406ff5de7d1cc3aaabcf1ecb07.zip"
    },
    "Environment": {
     "Variables": {
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      }
     }
    },
    "Handler": "index.handler",
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "EnvironmentLookupFunctionLogGroup0CA6EDAD"
     }
    },
    "Role": {
     "Fn::GetAtt": [
      "EnvironmentLookupFunctionServiceRole35D8AFE5",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "EnvironmentLookupFunctionServiceRoleDefaultPolicyC9624093",
    "EnvironmentLookupFunctionServiceRole35D8AFE5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "comamazonawscdkcdklabsgenaiidpidpcommonlayer2260994d588C4C0A": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.12"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "739c13a45d25b1e805657b0d6b9a0d898d6a3b6f6ee8c12b0307dacb1784e2f8.zip"
    },
    "Description": "Lambda Layer containing the idp_common Python package with modules: docs_service"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ClassifierUDOPModelRole4612773E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "sagemaker.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSageMakerFullAccess"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ClassifierUDOPModelRoleDefaultPolicyEC303929": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ecr:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Fn::FindInMap": [
            "DlcRepositoryAccountMap",
            {
             "Ref": "AWS::Region"
            },
            "value"
           ]
          },
          ":repository/pytorch-inference"
         ]
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Ref": "ModelBucketNameParameter"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Ref": "ModelBucketNameParameter"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClassifierUDOPModelRoleDefaultPolicyEC303929",
    "Roles": [
     {
      "Ref": "ClassifierUDOPModelRole4612773E"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ClassifierUDOPModel6051F88A": {
   "Type": "AWS::SageMaker::Model",
   "Properties": {
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ClassifierUDOPModelRole4612773E",
      "Arn"
     ]
    },
    "PrimaryContainer": {
     "Environment": {
      "SAGEMAKER_PROGRAM": "inference.py",
      "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/model/code",
      "SAGEMAKER_CONTAINER_LOG_LEVEL": "20",
      "SAGEMAKER_REGION": {
       "Ref": "AWS::Region"
      }
     },
     "Image": {
      "Fn::Join": [
       "",
       [
        {
         "Fn::FindInMap": [
          "DlcRepositoryAccountMap",
          {
           "Ref": "AWS::Region"
          },
          "value"
         ]
        },
        ".dkr.ecr.",
        {
         "Ref": "AWS::Region"
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/pytorch-inference:2.1.0-gpu-py310"
       ]
      ]
     },
     "ModelDataUrl": {
      "Fn::Join": [
       "",
       [
        "https://s3.",
        {
         "Ref": "AWS::Region"
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "ModelBucketNameParameter"
        },
        "/",
        {
         "Ref": "ModelObjectKeyParameter"
        }
       ]
      ]
     }
    }
   },
   "DependsOn": [
    "ClassifierUDOPModelRoleDefaultPolicyEC303929",
    "ClassifierUDOPModelRole4612773E"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ClassifierUDOPEndpointConfigB46FA53D": {
   "Type": "AWS::SageMaker::EndpointConfig",
   "Properties": {
    "ProductionVariants": [
     {
      "InitialInstanceCount": 1,
      "InitialVariantWeight": 1,
      "InstanceType": "ml.g5.2xlarge",
      "ModelName": {
       "Fn::GetAtt": [
        "ClassifierUDOPModel6051F88A",
        "ModelName"
       ]
      },
      "VariantName": "AllTraffic"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ClassifierUDOPEndpoint6D9DC658": {
   "Type": "AWS::SageMaker::Endpoint",
   "Properties": {
    "EndpointConfigName": {
     "Fn::GetAtt": [
      "ClassifierUDOPEndpointConfigB46FA53D",
      "EndpointConfigName"
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ClassifierUDOPEndpointInstanceCountTarget51E91FDE": {
   "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
   "Properties": {
    "MaxCapacity": 4,
    "MinCapacity": 1,
    "ResourceId": {
     "Fn::Join": [
      "",
      [
       "endpoint/",
       {
        "Fn::GetAtt": [
         "ClassifierUDOPEndpoint6D9DC658",
         "EndpointName"
        ]
       },
       "/variant/AllTraffic"
      ]
     ]
    },
    "RoleARN": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":iam::",
       {
        "Ref": "AWS::AccountId"
       },
       ":role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint"
      ]
     ]
    },
    "ScalableDimension": "sagemaker:variant:DesiredInstanceCount",
    "ServiceNamespace": "sagemaker"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ClassifierUDOPEndpointInstanceCountTargetScalingPolicyB202C833": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "Pattern3TestStack-endpoint-scaling",
    "PolicyType": "TargetTrackingScaling",
    "ScalingTargetId": {
     "Ref": "ClassifierUDOPEndpointInstanceCountTarget51E91FDE"
    },
    "TargetTrackingScalingPolicyConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "SageMakerVariantInvocationsPerInstance"
     },
     "ScaleInCooldown": 300,
     "ScaleOutCooldown": 60,
     "TargetValue": 10
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorUpdateSchemaConfig4C5D1735": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "EnvironmentUpdateConfigurationFunctionD5138FA8",
      "Arn"
     ]
    },
    "Schema": {
     "type": "object",
     "required": [
      "notes",
      "classes",
      "classification",
      "extraction"
     ],
     "properties": {
      "notes": {
       "order": 0,
       "type": "string",
       "description": "Notes"
      },
      "ocr": {
       "order": 1,
       "type": "object",
       "sectionLabel": "OCR Configuration",
       "required": [
        "features"
       ],
       "properties": {
        "image": {
         "type": "object",
         "sectionLabel": "Image Processing Settings",
         "description": "Configure image resolution and processing options for OCR",
         "order": 0,
         "properties": {
          "dpi": {
           "type": "number",
           "description": "DPI (dots per inch) for extracting images from PDF pages. Higher values produce better quality but larger images. Default: 150",
           "minimum": 72,
           "maximum": 300,
           "default": 150,
           "order": 0
          },
          "target_width": {
           "type": "number",
           "description": "Target image width in pixels. Images larger than this will be resized. Default: 951",
           "minimum": 100,
           "maximum": 3500,
           "order": 1
          },
          "target_height": {
           "type": "number",
           "description": "Target image height in pixels. Images larger than this will be resized. Default: 1268",
           "minimum": 100,
           "maximum": 3500,
           "order": 2
          },
          "preprocessing": {
           "type": "boolean",
           "description": "Apply adaptive binarization preprocessing to improve OCR accuracy on documents with uneven lighting or low contrast. Warning: May slightly increase processing time.",
           "default": false,
           "order": 3
          }
         }
        },
        "backend": {
         "type": "string",
         "description": "OCR backend to use: 'textract' for AWS Textract, 'bedrock' for LLM-based OCR, 'none' for image-only processing without OCR",
         "enum": [
          "textract",
          "bedrock",
          "none"
         ],
         "default": "textract",
         "order": 3
        },
        "model_id": {
         "type": "string",
         "description": "Bedrock model ID (only used if backend is 'bedrock')",
         "enum": [
          "us.amazon.nova-lite-v1:0",
          "us.amazon.nova-pro-v1:0",
          "us.amazon.nova-premier-v1:0",
          "us.anthropic.claude-3-haiku-20240307-v1:0",
          "us.anthropic.claude-3-5-sonnet-20241022-v2:0",
          "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0:1m",
          "us.anthropic.claude-opus-4-20250514-v1:0",
          "us.anthropic.claude-opus-4-1-20250805-v1:0"
         ],
         "order": 2,
         "dependsOn": {
          "field": "backend",
          "value": "bedrock"
         }
        },
        "system_prompt": {
         "type": "string",
         "description": "System prompt for Bedrock OCR (only used if backend is 'bedrock')",
         "default": "You are an expert OCR system. Extract all text from the provided image accurately, preserving layout where possible.",
         "order": 3,
         "dependsOn": {
          "field": "backend",
          "value": "bedrock"
         }
        },
        "task_prompt": {
         "type": "string",
         "description": "Task prompt for Bedrock OCR (only used if backend is 'bedrock')",
         "default": "Extract all text from this document image. Preserve the layout, including paragraphs, tables, and formatting.",
         "order": 4,
         "dependsOn": {
          "field": "backend",
          "value": "bedrock"
         }
        },
        "features": {
         "type": "array",
         "listLabel": "Textract Features",
         "itemLabel": "Feature",
         "description": "Textract features (only used if backend is 'textract')",
         "order": 5,
         "dependsOn": {
          "field": "backend",
          "values": [
           "textract"
          ]
         },
         "items": {
          "type": "object",
          "required": [
           "name"
          ],
          "properties": {
           "name": {
            "type": "string",
            "description": "Feature - select one of the supported OCR feature types",
            "enum": [
             "TABLES",
             "FORMS",
             "SIGNATURES",
             "LAYOUT"
            ]
           }
          }
         }
        }
       }
      },
      "classes": {
       "order": 2,
       "type": "array",
       "sectionLabel": "Class definitions",
       "listLabel": "Classes",
       "itemLabel": "Class",
       "columns": 2,
       "items": {
        "type": "object",
        "required": [
         "name",
         "description",
         "attributes"
        ],
        "properties": {
         "name": {
          "type": "string",
          "description": "Class name"
         },
         "description": {
          "type": "string",
          "description": "Class description. Instruct LLM how to identify the class from the context provided in the classification prompt."
         },
         "examples": {
          "type": "array",
          "description": "Class few-shot examples",
          "listLabel": "Few-shot examples",
          "itemLabel": "Few-shot example",
          "items": {
           "type": "object",
           "required": [
            "name",
            "classPrompt",
            "attributesPrompt",
            "imagePath"
           ],
           "properties": {
            "name": {
             "type": "string",
             "description": "Example name",
             "order": 0
            },
            "classPrompt": {
             "type": "string",
             "description": "Classification prompt as few-shot classification example for this class",
             "order": 2
            },
            "attributesPrompt": {
             "type": "string",
             "description": "Extraction prompt as few-shot attribute value extraction example for this class.",
             "order": 3
            },
            "imagePath": {
             "type": "string",
             "description": "Image(s) Path in the Configuration Bucket. Supports single files, or S3 prefixes for folders with multiple images. Optional but recommended for better visual understanding.",
             "order": 4
            }
           }
          }
         },
         "attributes": {
          "type": "array",
          "listLabel": "Attributes",
          "itemLabel": "Attribute",
          "items": {
           "type": "object",
           "required": [
            "name",
            "description",
            "attributeType"
           ],
           "properties": {
            "name": {
             "type": "string",
             "description": "Attribute name",
             "order": 0
            },
            "description": {
             "type": "string",
             "description": "Attribute description. Instruct the LLM how to identify the attribute from the context provided in the extraction prompt. Include synonyms and positional infomation where it might help the LLM to resolve ambiquities.",
             "order": 1
            },
            "attributeType": {
             "type": "string",
             "description": "Type of attribute",
             "enum": [
              "simple",
              "group",
              "list"
             ],
             "order": 2
            },
            "evaluation_method": {
             "type": "string",
             "description": "Evaluation Method",
             "enum": [
              "",
              "LLM",
              "SEMANTIC",
              "FUZZY",
              "NUMERIC_EXACT",
              "EXACT"
             ],
             "order": 3,
             "dependsOn": {
              "field": "attributeType",
              "value": "simple"
             }
            },
            "evaluation_threshold": {
             "type": "number",
             "description": "Evaluation Threshold - used for SEMANTIC, and FUZZY methods",
             "minimum": 0,
             "maximum": 1,
             "order": 5,
             "dependsOn": {
              "field": "evaluation_method",
              "values": [
               "SEMANTIC",
               "FUZZY"
              ]
             }
            },
            "confidence_threshold": {
             "type": "number",
             "description": "Confidence threshold for this specific attribute (0.0 to 1.0). If not set, the default confidence threshold from assessment section will be used.",
             "minimum": 0,
             "maximum": 1,
             "order": 6,
             "dependsOn": {
              "field": "attributeType",
              "value": "simple"
             }
            },
            "groupAttributes": {
             "type": "array",
             "listLabel": "Group Attributes",
             "itemLabel": "Attribute",
             "order": 7,
             "dependsOn": {
              "field": "attributeType",
              "value": "group"
             },
             "items": {
              "type": "object",
              "required": [
               "name",
               "description"
              ],
              "properties": {
               "name": {
                "type": "string",
                "description": "Attribute name",
                "order": 0
               },
               "description": {
                "type": "string",
                "description": "Attribute description. Instruct the LLM how to identify the attribute from the context provided in the extraction prompt. Include synonyms and positional infomation where it might help the LLM to resolve ambiquities.",
                "order": 1
               },
               "evaluation_method": {
                "type": "string",
                "description": "Evaluation Method",
                "enum": [
                 "",
                 "LLM",
                 "SEMANTIC",
                 "FUZZY",
                 "NUMERIC_EXACT",
                 "EXACT"
                ],
                "order": 2
               },
               "evaluation_threshold": {
                "type": "number",
                "description": "Evaluation Threshold - used for SEMANTIC, and FUZZY methods",
                "minimum": 0,
                "maximum": 1,
                "order": 4,
                "dependsOn": {
                 "field": "evaluation_method",
                 "values": [
                  "SEMANTIC",
                  "FUZZY"
                 ]
                }
               },
               "confidence_threshold": {
                "type": "number",
                "description": "Confidence threshold for this specific attribute (0.0 to 1.0). If not set, the default confidence threshold from assessment section will be used.",
                "minimum": 0,
                "maximum": 1,
                "order": 5
               }
              },
              "columns": 2
             }
            },
            "listItemTemplate": {
             "type": "object",
             "sectionLabel": "List Item Template",
             "order": 8,
             "dependsOn": {
              "field": "attributeType",
              "value": "list"
             },
             "required": [
              "itemAttributes"
             ],
             "properties": {
              "itemDescription": {
               "type": "string",
               "description": "Description of each list item. Instruct the LLM how to identify the list item (e.g. a transaction in a bank statement). ",
               "order": 0
              },
              "itemAttributes": {
               "type": "array",
               "listLabel": "Item Attributes",
               "itemLabel": "Attribute",
               "order": 1,
               "items": {
                "type": "object",
                "required": [
                 "name",
                 "description"
                ],
                "properties": {
                 "name": {
                  "type": "string",
                  "description": "Attribute name",
                  "order": 0
                 },
                 "description": {
                  "type": "string",
                  "description": "Attribute description. Instruct the LLM how to identify the attribute from the context provided in the extraction prompt. Include synonyms and positional infomation where it might help the LLM to resolve ambiquities.",
                  "order": 1
                 },
                 "evaluation_method": {
                  "type": "string",
                  "description": "Evaluation Method",
                  "enum": [
                   "",
                   "LLM",
                   "SEMANTIC",
                   "FUZZY",
                   "NUMERIC_EXACT",
                   "EXACT"
                  ],
                  "order": 2
                 },
                 "evaluation_threshold": {
                  "type": "number",
                  "description": "Evaluation Threshold - used for SEMANTIC, and FUZZY methods",
                  "minimum": 0,
                  "maximum": 1,
                  "order": 4,
                  "dependsOn": {
                   "field": "evaluation_method",
                   "values": [
                    "SEMANTIC",
                    "FUZZY"
                   ]
                  }
                 },
                 "confidence_threshold": {
                  "type": "number",
                  "description": "Confidence threshold for this specific attribute (0.0 to 1.0). If not set, the default confidence threshold from assessment section will be used.",
                  "minimum": 0,
                  "maximum": 1,
                  "order": 5
                 }
                },
                "columns": 2
               }
              }
             }
            }
           },
           "columns": 2
          }
         }
        }
       }
      },
      "extraction": {
       "order": 4,
       "type": "object",
       "format": "section",
       "sectionLabel": "Extraction Inference",
       "required": [
        "model",
        "temperature",
        "top_k",
        "top_p",
        "max_tokens",
        "system_prompt",
        "task_prompt"
       ],
       "properties": {
        "image": {
         "type": "object",
         "sectionLabel": "Image Processing Settings",
         "description": "Configure image resolution and processing options for for image attachments in extraction",
         "order": 0,
         "properties": {
          "target_width": {
           "type": "number",
           "description": "Target image width in pixels. Images larger than this will be resized. Default: 951",
           "minimum": 100,
           "maximum": 3500,
           "order": 0
          },
          "target_height": {
           "type": "number",
           "description": "Target image height in pixels. Images larger than this will be resized. Default: 1268",
           "minimum": 100,
           "maximum": 3500,
           "order": 1
          }
         }
        },
        "model": {
         "type": "string",
         "description": "Model identifier",
         "enum": [
          "us.amazon.nova-lite-v1:0",
          "us.amazon.nova-pro-v1:0",
          "us.amazon.nova-premier-v1:0",
          "us.anthropic.claude-3-haiku-20240307-v1:0",
          "us.anthropic.claude-3-5-sonnet-20241022-v2:0",
          "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0:1m",
          "us.anthropic.claude-opus-4-20250514-v1:0",
          "us.anthropic.claude-opus-4-1-20250805-v1:0"
         ],
         "order": 1
        },
        "temperature": {
         "type": "number",
         "minimum": 0,
         "maximum": 1,
         "description": "Sampling temperature",
         "order": 2
        },
        "top_k": {
         "type": "integer",
         "minimum": 1,
         "description": "Sampling Top K",
         "order": 3
        },
        "top_p": {
         "type": "number",
         "description": "Sampling Top P",
         "order": 4
        },
        "max_tokens": {
         "type": "number",
         "description": "Max tokens",
         "order": 5
        },
        "system_prompt": {
         "type": "string",
         "description": "System prompt",
         "order": 6
        },
        "task_prompt": {
         "type": "string",
         "description": "Task prompt - supports placeholders {DOCUMENT_CLASS} (replaced with the detected class label), {ATTRIBUTE_NAMES_AND_DESCRIPTIONS} (replaced with the attribute names and descriptions for the detected class), {FEW_SHOT_EXAMPLES} (replaced by classPrompt and image data from examples in class definitions), {DOCUMENT_TEXT} (replaced by the OCR output), and {DOCUMENT_IMAGE} (replaced by the page image attachments for each page). Optionally use <<CACHEPOINT>> to separate static and dynamic elements of prompt for Bedrock prompt caching.",
         "order": 7
        }
       }
      },
      "assessment": {
       "order": 5,
       "type": "object",
       "sectionLabel": "Assessment Inference",
       "properties": {
        "image": {
         "type": "object",
         "sectionLabel": "Image Processing Settings",
         "description": "Configure image resolution and processing options for for image attachments in assessment",
         "order": 0,
         "properties": {
          "target_width": {
           "type": "number",
           "description": "Target image width in pixels. Images larger than this will be resized. Default: 951",
           "minimum": 100,
           "maximum": 3500,
           "order": 0
          },
          "target_height": {
           "type": "number",
           "description": "Target image height in pixels. Images larger than this will be resized. Default: 1268",
           "minimum": 100,
           "maximum": 3500,
           "order": 1
          }
         }
        },
        "granular": {
         "type": "object",
         "sectionLabel": "Granular Assessment Configuration",
         "description": "Configure granular assessment for improved accuracy and scalability with large documents",
         "order": 1,
         "properties": {
          "enabled": {
           "type": "boolean",
           "description": "Enable granular assessment approach. When enabled, assessments are broken down into smaller, focused tasks for better accuracy and performance.",
           "default": true,
           "order": 0
          },
          "max_workers": {
           "type": "integer",
           "description": "Maximum number of parallel workers for concurrent assessment tasks. Higher values increase throughput but consume more resources.",
           "minimum": 1,
           "maximum": 20,
           "default": 4,
           "order": 1,
           "dependsOn": {
            "field": "enabled",
            "value": true
           }
          },
          "simple_batch_size": {
           "type": "integer",
           "description": "Number of simple attributes to group together in each assessment task. Smaller batches provide more focused assessments.",
           "minimum": 1,
           "maximum": 10,
           "default": 3,
           "order": 2,
           "dependsOn": {
            "field": "enabled",
            "value": true
           }
          },
          "list_batch_size": {
           "type": "integer",
           "description": "Number of list items to process in each assessment task. Usually 1 for best accuracy, can be increased for speed.",
           "minimum": 1,
           "maximum": 5,
           "default": 1,
           "order": 3,
           "dependsOn": {
            "field": "enabled",
            "value": true
           }
          }
         }
        },
        "default_confidence_threshold": {
         "type": "number",
         "description": "Default confidence threshold for all attributes (0.0 to 1.0). If an attribute doesn't have its own threshold, this default will be used for confidence threshold alerts.",
         "minimum": 0,
         "maximum": 1,
         "order": 2
        },
        "model": {
         "type": "string",
         "description": "Bedrock model ID",
         "enum": [
          "us.amazon.nova-lite-v1:0",
          "us.amazon.nova-pro-v1:0",
          "us.amazon.nova-premier-v1:0",
          "us.anthropic.claude-3-haiku-20240307-v1:0",
          "us.anthropic.claude-3-5-sonnet-20241022-v2:0",
          "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0:1m",
          "us.anthropic.claude-opus-4-20250514-v1:0",
          "us.anthropic.claude-opus-4-1-20250805-v1:0"
         ],
         "order": 3
        },
        "temperature": {
         "type": "number",
         "description": "Sampling temperature",
         "order": 4
        },
        "top_k": {
         "type": "number",
         "description": "Sampling Top K",
         "order": 5
        },
        "top_p": {
         "type": "number",
         "description": "Sampling Top P",
         "order": 6
        },
        "max_tokens": {
         "type": "number",
         "description": "Max tokens",
         "order": 7
        },
        "system_prompt": {
         "type": "string",
         "format": "textarea",
         "description": "System prompt",
         "order": 8
        },
        "task_prompt": {
         "type": "string",
         "format": "textarea",
         "description": "Task prompt - supports placeholders {DOCUMENT_TEXT} (markdown text), {OCR_TEXT_CONFIDENCE} (OCR text blocks with confidence), {DOCUMENT_CLASS}, {ATTRIBUTE_NAMES_AND_DESCRIPTIONS}, {EXTRACTION_RESULTS}, {GRANULAR_CONTEXT} and {DOCUMENT_IMAGE}. Use <<CACHEPOINT>> to separate static and dynamic elements of prompt for Bedrock prompt caching.",
         "order": 9
        }
       }
      },
      "summarization": {
       "order": 6,
       "type": "object",
       "sectionLabel": "Summarization Inference",
       "properties": {
        "model": {
         "type": "string",
         "description": "Bedrock model ID",
         "enum": [
          "us.amazon.nova-lite-v1:0",
          "us.amazon.nova-pro-v1:0",
          "us.amazon.nova-premier-v1:0",
          "us.anthropic.claude-3-haiku-20240307-v1:0",
          "us.anthropic.claude-3-5-sonnet-20241022-v2:0",
          "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0",
          "us.anthropic.claude-sonnet-4-20250514-v1:0:1m",
          "us.anthropic.claude-opus-4-20250514-v1:0",
          "us.anthropic.claude-opus-4-1-20250805-v1:0"
         ],
         "order": 1
        },
        "temperature": {
         "type": "number",
         "description": "Sampling temperature",
         "order": 2
        },
        "top_k": {
         "type": "number",
         "description": "Sampling Top K",
         "order": 3
        },
        "top_p": {
         "type": "number",
         "description": "Sampling Top P",
         "order": 4
        },
        "max_tokens": {
         "type": "number",
         "description": "Max tokens",
         "order": 5
        },
        "system_prompt": {
         "type": "string",
         "format": "textarea",
         "description": "System prompt",
         "order": 6
        },
        "task_prompt": {
         "type": "string",
         "format": "textarea",
         "description": "Task prompt - supports parameter {DOCUMENT_TEXT}. Optionally use <<CACHEPOINT>> to separate static and dynamic elements of prompt for Bedrock prompt caching.",
         "order": 7
        }
       }
      },
      "evaluation": {
       "order": 7,
       "type": "object",
       "sectionLabel": "Evaluation Inference",
       "properties": {
        "llm_method": {
         "type": "object",
         "properties": {
          "model": {
           "type": "string",
           "description": "Bedrock model ID",
           "enum": [
            "us.amazon.nova-lite-v1:0",
            "us.amazon.nova-pro-v1:0",
            "us.amazon.nova-premier-v1:0",
            "us.anthropic.claude-3-haiku-20240307-v1:0",
            "us.anthropic.claude-3-5-sonnet-20241022-v2:0",
            "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
            "us.anthropic.claude-sonnet-4-20250514-v1:0",
            "us.anthropic.claude-sonnet-4-20250514-v1:0:1m",
            "us.anthropic.claude-opus-4-20250514-v1:0",
            "us.anthropic.claude-opus-4-1-20250805-v1:0"
           ],
           "order": 1
          },
          "temperature": {
           "type": "number",
           "description": "Sampling temperature",
           "default": 0,
           "order": 2
          },
          "top_k": {
           "type": "number",
           "description": "Sampling Top K",
           "default": 250,
           "order": 3
          },
          "top_p": {
           "type": "number",
           "description": "Sampling Top P",
           "order": 4
          },
          "max_tokens": {
           "type": "number",
           "description": "Max tokens",
           "order": 5
          },
          "system_prompt": {
           "type": "string",
           "format": "textarea",
           "description": "System prompt for LLM evaluation",
           "order": 6
          },
          "task_prompt": {
           "type": "string",
           "format": "textarea",
           "description": "Task prompt for LLM evaluation - supports placeholders {DOCUMENT_CLASS}, {ATTRIBUTE_NAME}, {ATTRIBUTE_DESCRIPTION}, {EXPECTED_VALUE} and {ACTUAL_VALUE}",
           "order": 7
          }
         }
        }
       }
      },
      "pricing": {
       "order": 8,
       "type": "array",
       "sectionLabel": "Pricing (Estimates only - check https://aws.amazon.com/bedrock/pricing/ & https://aws.amazon.com/textract/pricing/)",
       "listLabel": "Services",
       "itemLabel": "Service/API",
       "columns": 2,
       "items": {
        "type": "object",
        "required": [
         "name",
         "units"
        ],
        "properties": {
         "name": {
          "type": "string",
          "description": "Service/API"
         },
         "units": {
          "type": "array",
          "listLabel": "Metered unit pricing",
          "itemLabel": "Metered Unit price",
          "items": {
           "type": "object",
           "required": [
            "name",
            "price"
           ],
           "properties": {
            "name": {
             "type": "string",
             "description": "Metered unit name"
            },
            "price": {
             "type": "number",
             "description": "Estimated cost/unit"
            }
           }
          }
         }
        }
       }
      }
     }
    },
    "ConfigurationTable": {
     "Ref": "EnvironmentConfigurationTableFFC21CA7"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorUpdateDefaultConfigAC8BE482": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "EnvironmentUpdateConfigurationFunctionD5138FA8",
      "Arn"
     ]
    },
    "Default": {
     "notes": "Default settings",
     "ocr": {
      "backend": "textract",
      "model_id": "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
      "system_prompt": "You are an expert OCR system. Extract all text from the provided image accurately, preserving layout where possible.",
      "task_prompt": "Extract all text from this document image. Preserve the layout, including paragraphs, tables, and formatting.",
      "features": [
       {
        "name": "LAYOUT"
       },
       {
        "name": "TABLES"
       },
       {
        "name": "SIGNATURES"
       }
      ],
      "image": {
       "dpi": "150",
       "target_width": "",
       "target_height": ""
      }
     },
     "classes": [
      {
       "name": "letter",
       "description": "A formal written correspondence with sender/recipient addresses, date, salutation, body, and closing signature",
       "attributes": [
        {
         "name": "sender_name",
         "description": "The name of the person or entity who wrote or sent the letter. Look for text following or near terms like 'from', 'sender', 'authored by', 'written by', or at the end of the letter before a signature.",
         "confidence_threshold": "0.85"
        },
        {
         "name": "sender_address",
         "description": "The physical address of the sender, typically appearing at the top of the letter. May be labeled as 'address', 'location', or 'from address'.",
         "confidence_threshold": "0.8"
        },
        {
         "name": "recipient_name",
         "description": "The name of the person or entity receiving the letter. Look for this after 'to', 'recipient', 'addressee', or at the beginning of the letter.",
         "confidence_threshold": "0.9"
        },
        {
         "name": "recipient_address",
         "description": "The physical address where the letter is to be delivered. Often labeled as 'to address' or 'delivery address', typically appearing below the recipient name."
        },
        {
         "name": "date",
         "description": "The date when the letter was written. Look for a standalone date or text following phrases like 'written on' or 'dated'."
        },
        {
         "name": "subject",
         "description": "The topic or main point of the letter. Often preceded by 'subject', 'RE:', or 'regarding'."
        },
        {
         "name": "letter_type",
         "description": "The category or classification of the letter, such as 'complaint', 'inquiry', 'invitation', etc. May be indicated by 'type' or 'category'."
        },
        {
         "name": "signature",
         "description": "The handwritten name or mark of the sender at the end of the letter. May follow terms like 'signed by' or simply appear at the bottom of the document."
        },
        {
         "name": "cc",
         "description": "Names of people who receive a copy of the letter in addition to the main recipient. Often preceded by 'cc', 'carbon copy', or 'copy to'."
        },
        {
         "name": "reference_number",
         "description": "An identifying number or code associated with the letter. Look for labels like 'ref', 'reference', or 'our ref'."
        }
       ]
      },
      {
       "name": "form",
       "description": "A structured document with labeled fields, checkboxes, or blanks requiring user input and completion",
       "attributes": [
        {
         "name": "form_type",
         "description": "The category or purpose of the form, such as 'application', 'registration', 'request', etc. May be identified by 'form name', 'document type', or 'form category'."
        },
        {
         "name": "form_id",
         "description": "The unique identifier for the form, typically a number or alphanumeric code. Often labeled as 'form number', 'id', or 'reference number'."
        },
        {
         "name": "submission_date",
         "description": "The date when the form was submitted or filed. Look for text near 'date', 'submitted on', or 'filed on'."
        },
        {
         "name": "submitter_name",
         "description": "The name of the person who submitted the form. May be labeled as 'name', 'submitted by', or 'filed by'."
        },
        {
         "name": "submitter_id",
         "description": "An identification number for the person submitting the form, such as social security number, employee ID, etc. Often labeled as 'id number', 'identification', or 'reference'."
        },
        {
         "name": "approval_status",
         "description": "The current state of approval for the form, such as 'approved', 'pending', 'rejected', etc. Look for terms like 'status', 'approved', or 'pending'."
        },
        {
         "name": "processed_by",
         "description": "The name of the person or department that processed the form. May be indicated by 'processor', 'handled by', or 'approved by'."
        },
        {
         "name": "processing_date",
         "description": "The date when the form was processed or completed. Look for labels like 'processed on' or 'completion date'."
        },
        {
         "name": "department",
         "description": "The organizational unit responsible for the form. Often abbreviated as 'dept' or may appear as 'department' or 'division'."
        },
        {
         "name": "comments",
         "description": "Additional notes or remarks about the form. Look for sections labeled 'notes', 'remarks', or 'comments'."
        }
       ]
      },
      {
       "name": "invoice",
       "description": "A billing document listing items/services, quantities, prices, payment terms, and transaction totals",
       "attributes": [
        {
         "name": "invoice_number",
         "description": "The unique identifier for the invoice. Look for 'invoice no', 'invoice"
        },
        {
         "name": "invoice_date",
         "description": "The date when the invoice was issued. May be labeled as 'date', 'invoice date', or 'billing date'."
        },
        {
         "name": "due_date",
         "description": "The deadline by which payment must be made. Look for 'due date', 'payment due', or 'payable by'."
        },
        {
         "name": "vendor_name",
         "description": "The name of the business providing goods or services. May be labeled as 'vendor', 'seller', 'supplier', or simply appear prominently at the top of the invoice."
        },
        {
         "name": "vendor_address",
         "description": "The physical location of the vendor. Look for 'address', 'location', or 'business address', typically near the vendor name."
        },
        {
         "name": "customer_name",
         "description": "The name of the person or entity being billed. Often preceded by 'customer', 'buyer', or 'bill to'."
        },
        {
         "name": "customer_address",
         "description": "The address where the invoice is sent or goods are delivered. May be labeled as 'billing address' or 'ship to'."
        },
        {
         "name": "items",
         "description": "Descriptions of the products or services provided. Look for a section with 'description', 'item details', or 'products', usually in a table format."
        },
        {
         "name": "quantities",
         "description": "The number of each item provided. Often abbreviated as 'qty' or may appear as 'quantity' or 'amount' in a table column."
        },
        {
         "name": "unit_prices",
         "description": "The cost per unit of each item. May be labeled as 'price', 'rate', or 'unit cost'."
        },
        {
         "name": "subtotal",
         "description": "The sum of all items before tax and other charges. Look for 'subtotal' or 'net amount', typically found toward the bottom of the invoice."
        },
        {
         "name": "tax",
         "description": "The amount of tax charged on the invoice. May be labeled as 'tax', 'VAT', or 'GST', usually appearing after the subtotal."
        },
        {
         "name": "total_amount",
         "description": "The final amount to be paid including all charges. Look for 'total', 'grand total', or 'amount due', typically the last figure on the invoice."
        },
        {
         "name": "payment_terms",
         "description": "The conditions under which payment should be made, such as '30 days', 'COD', etc. Often labeled as 'terms', 'payment terms', or 'conditions'."
        },
        {
         "name": "po_number",
         "description": "The purchase order reference number. May be abbreviated as 'PO' or appear as 'purchase order' or 'order reference'."
        }
       ]
      },
      {
       "name": "resume",
       "description": "A professional summary showcasing work experience, education, skills, and achievements for job applications",
       "attributes": [
        {
         "name": "full_name",
         "description": "The complete name of the job applicant, typically appearing prominently at the top of the resume. May be simply labeled as 'name' or 'applicant name'."
        },
        {
         "name": "contact_info",
         "description": "The phone number, email, and address of the applicant. Look for a section with 'contact', 'phone', 'email', or 'address', usually near the top of the resume."
        },
        {
         "name": "objective",
         "description": "A statement outlining the applicant's career goals. May be labeled as 'objective', 'summary', or 'profile', typically appearing early in the resume."
        },
        {
         "name": "education",
         "description": "The academic history and qualifications of the applicant. Look for a section with 'education', 'academic background', or 'qualifications'."
        },
        {
         "name": "experience",
         "description": "The work history and previous roles of the applicant. Often labeled as 'experience', 'work history', or 'employment'."
        },
        {
         "name": "skills",
         "description": "The abilities and competencies of the applicant. Look for a section titled 'skills', 'competencies', or 'expertise'."
        },
        {
         "name": "certifications",
         "description": "Professional credentials and qualifications. May be labeled as 'certifications', 'certificates', or 'credentials'."
        },
        {
         "name": "languages",
         "description": "Languages known and level of proficiency. Often appears in a section labeled 'languages' or 'language proficiency'."
        },
        {
         "name": "references",
         "description": "People who can vouch for the applicant's abilities. Look for 'references' or 'referees', typically at the end of the resume."
        },
        {
         "name": "achievements",
         "description": "Notable accomplishments and recognition. May be labeled as 'achievements', 'accomplishments', or 'awards'."
        }
       ]
      },
      {
       "name": "scientific_publication",
       "description": "A peer-reviewed academic document with abstract, methodology, results, citations, and research findings",
       "attributes": [
        {
         "name": "title",
         "description": "The name of the scientific paper, typically appearing prominently at the beginning. May be labeled as 'title', 'paper title', or 'article title'."
        },
        {
         "name": "authors",
         "description": "The researchers who conducted the study and wrote the paper. Look for names after 'authors', 'contributors', or 'researchers', usually following the title."
        },
        {
         "name": "abstract",
         "description": "A brief summary of the paper's content. Often labeled as 'abstract' or 'summary', appearing before the main text."
        },
        {
         "name": "keywords",
         "description": "Terms that represent the core topics of the paper. Look for a list labeled 'keywords' or 'key terms', typically after the abstract."
        },
        {
         "name": "publication_date",
         "description": "The date when the paper was published. May be preceded by 'published' or labeled as 'publication date'."
        },
        {
         "name": "journal_name",
         "description": "The name of the journal where the paper was published. Look for text following 'journal' or 'publication'."
        },
        {
         "name": "volume",
         "description": "The volume number of the journal. Often abbreviated as 'vol' or may appear as 'volume'."
        },
        {
         "name": "issue",
         "description": "The issue number of the journal. May be labeled as 'issue' or abbreviated as 'no'."
        },
        {
         "name": "pages",
         "description": "The page range of the paper in the journal. Often abbreviated as 'pp' or may appear as 'pages'."
        },
        {
         "name": "doi",
         "description": "The Digital Object Identifier for the paper, a unique alphanumeric string. Look for 'DOI' or 'digital object identifier'."
        },
        {
         "name": "funding",
         "description": "Financial support received for the research. May be indicated by 'funding', 'grants', or 'financial support'."
        },
        {
         "name": "corresponding_author",
         "description": "The author responsible for communication regarding the paper. Look for 'corresponding author' or 'contact author'."
        },
        {
         "name": "institutions",
         "description": "The organizations with which the authors are affiliated. May be labeled as 'affiliations' or 'institutions'."
        }
       ]
      },
      {
       "name": "memo",
       "description": "An internal business communication with TO/FROM/DATE/SUBJECT headers for organizational announcements or directives",
       "attributes": [
        {
         "name": "memo_date",
         "description": "The date when the memo was written. Look for 'date' or 'memo date', typically near the top of the document."
        },
        {
         "name": "from",
         "description": "The person or department that wrote the memo. May be labeled as 'from', 'sender', or 'author'."
        },
        {
         "name": "to",
         "description": "The intended recipient of the memo. Look for text after 'to', 'recipient', or 'addressee'."
        },
        {
         "name": "subject",
         "description": "The topic of the memo. Often preceded by 'subject', 'RE:', or 'regarding'."
        },
        {
         "name": "memo_type",
         "description": "The category or classification of the memo, such as 'informational', 'directive', etc. May be indicated by 'type' or 'category'."
        },
        {
         "name": "priority",
         "description": "The urgency level of the memo, such as 'urgent', 'high', 'normal', etc. Look for 'priority' or 'urgency'."
        },
        {
         "name": "distribution_list",
         "description": "Additional people who receive copies of the memo. May be labeled as 'distribution', 'cc', or 'copy'."
        },
        {
         "name": "reference_number",
         "description": "An identifying number or code for the memo. Look for 'reference' or 'ref no'."
        },
        {
         "name": "department",
         "description": "The organizational unit issuing the memo. Often abbreviated as 'dept' or may appear as 'department' or 'division'."
        },
        {
         "name": "action_required",
         "description": "Steps that should be taken in response to the memo. Look for 'action', 'response needed', or 'next steps'."
        }
       ]
      },
      {
       "name": "advertisement",
       "description": "A promotional material featuring product images, marketing text, calls-to-action, and branding elements",
       "attributes": [
        {
         "name": "product_name",
         "description": "The name of the item or service being advertised. Look for prominently displayed text that could be a 'product', 'item', or 'service' name."
        },
        {
         "name": "brand",
         "description": "The company or manufacturer of the product. May be indicated by a logo or text labeled as 'brand', 'company', or 'manufacturer'."
        },
        {
         "name": "price",
         "description": "The cost of the product or service. Look for currency symbols or numbers followed by terms like 'price', 'cost', or 'special offer'."
        },
        {
         "name": "promotion_details",
         "description": "Information about special deals or discounts. May be introduced with 'promotion', 'offer', or 'deal'."
        },
        {
         "name": "validity_period",
         "description": "The timeframe during which the offer is valid. Look for phrases like 'valid until', 'offer ends', or 'expires'."
        },
        {
         "name": "contact_info",
         "description": "How to reach the advertiser. May include phone numbers, websites, or addresses following 'contact', 'call', or 'visit'."
        },
        {
         "name": "features",
         "description": "Notable qualities or benefits of the product. Often listed under 'features', 'benefits', or 'highlights'."
        },
        {
         "name": "terms_conditions",
         "description": "Legal constraints or limitations of the offer. Look for fine print labeled as 'terms', 'conditions', or 'restrictions'."
        },
        {
         "name": "call_to_action",
         "description": "What the advertisement encourages the reader to do. Often appears as imperative phrases like 'call now', 'visit today', or 'order now'."
        },
        {
         "name": "disclaimer",
         "description": "Legal statements limiting liability or making clarifications. Usually appears as fine print introduced by 'disclaimer' or phrases like 'terms apply' or 'conditions apply'."
        }
       ]
      },
      {
       "name": "email",
       "description": "A digital message with email headers (To/From/Subject), timestamps, and conversational threading",
       "attributes": [
        {
         "name": "from_address",
         "description": "The email address of the sender. Look for text following 'from', 'sender', or 'sent by', typically at the beginning of the email header."
        },
        {
         "name": "to_address",
         "description": "The email address of the primary recipient. May be labeled as 'to', 'recipient', or 'sent to'."
        },
        {
         "name": "cc_address",
         "description": "Email addresses of additional recipients who receive copies. Look for 'cc' or 'carbon copy' followed by one or more email addresses."
        },
        {
         "name": "bcc_address",
         "description": "Email addresses of hidden recipients. May be labeled as 'bcc' or 'blind copy'."
        },
        {
         "name": "subject",
         "description": "The topic of the email. Often preceded by 'subject', 'RE:', or 'regarding'."
        },
        {
         "name": "date_sent",
         "description": "The date and time when the email was sent. Look for 'date', 'sent on', or 'received', typically in the email header."
        },
        {
         "name": "attachments",
         "description": "Files included with the email. May be indicated by 'attached', 'attachment', or 'enclosed', often with icons or file names."
        },
        {
         "name": "priority",
         "description": "The urgency level of the email, such as 'high', 'normal', etc. Look for 'priority' or 'importance'."
        },
        {
         "name": "thread_id",
         "description": "An identifier for the email conversation. May be labeled as 'thread' or 'conversation', typically not visible to regular users."
        },
        {
         "name": "message_id",
         "description": "A unique identifier for the specific email. Look for 'message id' or 'email id', usually hidden in the email metadata."
        }
       ]
      },
      {
       "name": "questionnaire",
       "description": "A survey instrument containing numbered questions with multiple choice, rating scales, or open-ended responses",
       "attributes": [
        {
         "name": "form_title",
         "description": "The name or title of the questionnaire. Look for prominently displayed text at the beginning that could be a 'title', 'survey name', or 'questionnaire name'."
        },
        {
         "name": "respondent_info",
         "description": "Information about the person completing the questionnaire. May include fields labeled 'respondent', 'participant', or 'name'."
        },
        {
         "name": "submission_date",
         "description": "The date when the questionnaire was completed. Look for 'date', 'completed on', or 'submitted'."
        },
        {
         "name": "section_headers",
         "description": "Titles for different segments of the questionnaire. Often appear as bold or larger text introducing a new 'section', 'part', or 'segment'."
        },
        {
         "name": "question_types",
         "description": "The format of questions (multiple choice, free text, etc.). May be indicated by 'type', 'question format', or 'response format'."
        },
        {
         "name": "response_options",
         "description": "Possible answers for multiple-choice questions. Look for checkboxes, radio buttons, or dropdown menus with 'options', 'choices', or 'answers'."
        },
        {
         "name": "required_fields",
         "description": "Questions that must be answered to complete the questionnaire. Often marked with an asterisk (*) or explicitly labeled as 'required', 'mandatory', or 'must answer'."
        },
        {
         "name": "instructions",
         "description": "Guidance on how to complete the questionnaire. Look for text introduced by 'instructions', 'directions', or 'guidelines'."
        },
        {
         "name": "survey_id",
         "description": "A unique identifier for the questionnaire. May be labeled as 'survey id', 'reference number', or 'form id'."
        },
        {
         "name": "completion_status",
         "description": "Whether the questionnaire has been fully completed. Look for indicators of 'status', 'completion', or 'progress', often shown as a percentage or progress bar."
        },
        {
         "name": "Phone Call Representative Courtesy",
         "description": "Measures the perceived politeness and professionalism of the customer service representative during the phone interaction. Checkbox selection on the satisfaction scale with options like \"Very Satisfied\", \"Somewhat Satisfied\" etc.",
         "attributes": [],
         "evaluation_method": ""
        },
        {
         "name": "Phone call representative knowledge rating",
         "description": "Measures the perceived knowledge level of the customer service representative during the phone interaction. Checkbox selection on the satisfaction scale with options like \"Very Satisfied\", \"Somewhat Satisfied\" etc.",
         "attributes": []
        },
        {
         "name": "Request handling satisfaction rating",
         "description": "Measures the customer's level of satisfaction with the way their request was handled. Checkbox selection on the satisfaction scale with options like \"Very Satisfied\", \"Somewhat Satisfied\" etc.",
         "attributes": []
        },
        {
         "name": "Overall Satisfaction rating",
         "description": "This rating BEST describes the way the customer feels about the representative's response to their request for asssistance. Checkbox selection on the satisfaction scale with options like \"I was very satisfied\", \"I was somewhat satisfied\" etc.",
         "attributes": []
        },
        {
         "name": "Future purchase intent",
         "description": "A measure of whether the user will continue to buy the product they contacted about. Checkbox selection with options like \"I definitely would\", \"I probably would\" etc.",
         "attributes": []
        },
        {
         "name": "Product recommendation intent",
         "description": "A measure of whether the caller is willing to recommend the product that they called about to others. Checkbox selection with options like \"I definitely would\", \"I probably would\" etc.",
         "attributes": []
        }
       ]
      },
      {
       "name": "specification",
       "description": "A technical document detailing precise requirements, measurements, standards, and implementation criteria",
       "attributes": [
        {
         "name": "product_name",
         "description": "The name of the item being specified. Look for text labeled as 'product', 'item', or 'model', typically appearing prominently at the beginning."
        },
        {
         "name": "version",
         "description": "The iteration or release number. May be indicated by 'version', 'revision', or 'release', often followed by a number or code."
        },
        {
         "name": "technical_details",
         "description": "Specific characteristics and capabilities. Look for sections labeled 'specifications', 'tech specs', or 'details', often presented in a detailed list."
        },
        {
         "name": "requirements",
         "description": "Necessary conditions or resources. May be introduced with 'requirements', 'prerequisites', or 'needed'."
        },
        {
         "name": "compatibility",
         "description": "What the product can work with. Look for text following 'compatible with', 'works with', or 'supports'."
        },
        {
         "name": "dimensions",
         "description": "Physical measurements of the product. Often labeled as 'dimensions', 'size', or 'measurements', usually including length, width, height, etc."
        },
        {
         "name": "materials",
         "description": "What the product is made from. May be indicated by 'materials', 'composition', or phrases like 'made from'."
        },
        {
         "name": "standards",
         "description": "Industry guidelines or certifications met. Look for references to 'standards', 'certifications', or 'compliance'."
        },
        {
         "name": "revision_history",
         "description": "Record of changes to the specification. Often labeled as 'revisions', 'changes', or 'updates', typically in a table format."
        },
        {
         "name": "approval_info",
         "description": "Details about who has validated the specification. May be indicated by phrases like 'approved by', 'certified by', or 'validated'."
        }
       ]
      },
      {
       "name": "generic",
       "description": "An unstructured document lacking distinctive formatting or purpose-specific elements of other categories",
       "attributes": [
        {
         "name": "document_type",
         "description": "The classification or category of the document. Look for terms like 'type', 'category', or 'class' that indicate what kind of document this is."
        },
        {
         "name": "document_date",
         "description": "The date when the document was created. May be labeled as 'date', 'created on', or 'issued on'."
        },
        {
         "name": "document_id",
         "description": "A unique identifier for the document. Look for 'id', 'reference', or 'number', typically appearing near the top of the document."
        },
        {
         "name": "title",
         "description": "The name or heading of the document. Often appears prominently at the beginning, may be labeled as 'title', 'heading', or 'subject'."
        },
        {
         "name": "author",
         "description": "The person who created the document. Look for 'author', 'creator', or 'sender'."
        },
        {
         "name": "recipient",
         "description": "The person for whom the document is intended. May be indicated by 'recipient', 'to', or 'addressee'."
        },
        {
         "name": "content_summary",
         "description": "A brief description of the document's contents. Look for 'summary', 'abstract', or 'overview', typically appearing early in the document."
        },
        {
         "name": "status",
         "description": "The current state of the document, such as 'draft', 'final', 'pending', etc. May be labeled as 'status', 'state', or 'condition'."
        },
        {
         "name": "department",
         "description": "The organizational unit associated with the document. Often abbreviated as 'dept' or may appear as 'department' or 'division'."
        },
        {
         "name": "comments",
         "description": "Additional notes or remarks about the document. Look for sections labeled 'notes', 'remarks', or 'comments'."
        }
       ]
      }
     ],
     "classification": {
      "model": "Custom fine tuned UDOP model"
     },
     "extraction": {
      "image": {
       "target_width": "",
       "target_height": ""
      },
      "top_p": "0.1",
      "max_tokens": "10000",
      "top_k": "5",
      "task_prompt": "<background>\nYou are an expert in document analysis and information extraction.  You can understand and extract key information from documents classified as type \n{DOCUMENT_CLASS}.\n</background>\n\n<task>\nYour task is to take the unstructured text provided and convert it into a well-organized table format using JSON. Identify the main entities, attributes, or categories mentioned in the attributes list below and use them as keys in the JSON object.  Then, extract the relevant information from the text and populate the corresponding values in the JSON object.\n</task>\n\n<extraction-guidelines>\nGuidelines:\n    1. Ensure that the data is accurately represented and properly formatted within\n    the JSON structure\n    2. Include double quotes around all keys and values\n    3. Do not make up data - only extract information explicitly found in the\n    document\n    4. Do not use /n for new lines, use a space instead\n    5. If a field is not found or if unsure, return null\n    6. All dates should be in MM/DD/YYYY format\n    7. Do not perform calculations or summations unless totals are explicitly given\n    8. If an alias is not found in the document, return null\n    9. Guidelines for checkboxes:\n     9.A. CAREFULLY examine each checkbox, radio button, and selection field:\n        - Look for marks like ✓, ✗, x, filled circles (●), darkened areas, or handwritten checks indicating selection\n        - For checkboxes and multi-select fields, ONLY INCLUDE options that show clear visual evidence of selection\n        - DO NOT list options that have no visible selection mark\n     9.B. For ambiguous or overlapping tick marks:\n        - If a mark overlaps between two or more checkboxes, determine which option contains the majority of the mark\n        - Consider a checkbox selected if the mark is primarily inside the check box or over the option text\n        - When a mark touches multiple options, analyze which option was most likely intended based on position and density. For handwritten checks, the mark typically flows from the selected checkbox outward.\n        - Carefully analyze visual cues and contextual hints. Think from a human perspective, anticipate natural tendencies, and apply thoughtful reasoning to make the best possible judgment.\n    10. Think step by step first and then answer.\n\n</extraction-guidelines>\nIf the attributes section below contains a list of attribute names and descriptions, then output only those attributes, using the provided descriptions as guidance for finding the correct values. \n<attributes>\n{ATTRIBUTE_NAMES_AND_DESCRIPTIONS}\n</attributes>\n\n<<CACHEPOINT>>\n\n<document-text>\n{DOCUMENT_TEXT}\n</document-text>\n\n<document_image>\n{DOCUMENT_IMAGE}\n</document_image>\n\n<final-instructions>\nExtract key information from the document and return a JSON object with the following key steps: 1. Carefully analyze the document text to identify the requested attributes 2. Extract only information explicitly found in the document - never make up data 3. Format all dates as MM/DD/YYYY and replace newlines with spaces 4. For checkboxes, only include options with clear visual selection marks 5. Use null for any fields not found in the document 6. Ensure the output is properly formatted JSON with quoted keys and values 7. Think step by step before finalizing your answer\n</final-instructions>",
      "temperature": "0.0",
      "model": "us.amazon.nova-pro-v1:0",
      "system_prompt": "You are a document assistant. Respond only with JSON. Never make up data, only provide data found in the document being provided."
     },
     "summarization": {
      "enabled": true,
      "top_p": "0.1",
      "max_tokens": "4096",
      "top_k": "5",
      "task_prompt": "<document-text>\n{DOCUMENT_TEXT}\n</document-text>\nAnalyze the provided document (<document-text>) and create a comprehensive summary.\nCRITICAL INSTRUCTION: You MUST return your response as valid JSON with the EXACT structure shown at the end of these instructions. Do not include any explanations, notes, or text outside of the JSON structure.\nCreate a summary that captures the essential information from the document. Your summary should:\n1. Extract key information, main points, and important details\n2. Maintain the original document's organizational structure where appropriate\n3. Preserve important facts, figures, dates, and entities\n4. Reduce the length while retaining all critical information\n5. Use markdown formatting for better readability (headings, lists, emphasis, etc.)\n6. Cite all relevant facts from the source document using inline citations in the format [Cite-X, Page-Y] where X is a sequential citation number and Y is the page number\n7. Format citations as markdown links that reference the full citation list at the bottom of the summary\n  Example: [[Cite-1, Page-3]](#cite-1-page-3)\n\n8. At the end of the summary, include a \"References\" section that lists all citations with their exact text from the source document in the format:\n  [Cite-X, Page-Y]: Exact text from the document\n\nOutput Format:\nYou MUST return ONLY valid JSON with the following structure and nothing else:\n```json {\n  \"summary\": \"A comprehensive summary in markdown format with inline citations linked to a references section at the bottom\"\n} ```\nDo not include any text, explanations, or notes outside of this JSON structure. The JSON must be properly formatted and parseable.",
      "temperature": "0.0",
      "model": "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
      "system_prompt": "You are a document summarization expert who can analyze and summarize documents from various domains including medical, financial, legal, and general business documents. Your task is to create a summary that captures the key information, main points, and important details from the document. Your output must be in valid JSON format. \\nSummarization Style: Balanced\\\\nCreate a balanced summary that provides a moderate level of detail. Include the main points and key supporting information, while maintaining the document's overall structure. Aim for a comprehensive yet concise summary.\\n Your output MUST be in valid JSON format with markdown content. You MUST strictly adhere to the output format specified in the instructions."
     },
     "assessment": {
      "enabled": true,
      "image": {
       "target_height": "",
       "target_width": ""
      },
      "granular": {
       "enabled": true,
       "max_workers": "20",
       "simple_batch_size": "3",
       "list_batch_size": "1"
      },
      "default_confidence_threshold": "0.8",
      "top_p": "0.1",
      "max_tokens": "10000",
      "top_k": "5",
      "temperature": "0.0",
      "model": "us.amazon.nova-lite-v1:0",
      "system_prompt": "You are a document analysis assessment expert. Your role is to evaluate the confidence and accuracy of data extraction results by analyzing them against source documents.\nProvide accurate confidence scores for each assessment. When bounding boxes are requested, provide precise coordinate locations where information appears in the document.",
      "task_prompt": "<background> You are an expert document analysis assessment system. Your task is to evaluate the confidence of extraction results for a document of class {DOCUMENT_CLASS} and provide precise spatial localization for each field. </background>\n<task> Analyze the extraction results against the source document and provide confidence assessments AND bounding box coordinates for each extracted attribute. Consider factors such as: 1. Text clarity and OCR quality in the source regions  2. Alignment between extracted values and document content  3. Presence of clear evidence supporting the extraction  4. Potential ambiguity or uncertainty in the source material  5. Completeness and accuracy of the extracted information 6. Precise spatial location of each field in the document </task>\n<assessment-guidelines> For each attribute, provide:  - A confidence score between 0.0 and 1.0 where:\n   - 1.0 = Very high confidence, clear and unambiguous evidence\n   - 0.8-0.9 = High confidence, strong evidence with minor uncertainty\n   - 0.6-0.7 = Medium confidence, reasonable evidence but some ambiguity\n   - 0.4-0.5 = Low confidence, weak or unclear evidence\n   - 0.0-0.3 = Very low confidence, little to no supporting evidence\n- A clear explanation of the confidence reasoning - Precise spatial coordinates where the field appears in the document\nGuidelines:  - Base assessments on actual document content and OCR quality  - Consider both text-based evidence and visual/layout clues  - Account for OCR confidence scores when provided  - Be objective and specific in reasoning  - If an extraction appears incorrect, score accordingly with explanation - Provide tight, accurate bounding boxes around the actual text </assessment-guidelines>\n<spatial-localization-guidelines> For each field, provide bounding box coordinates: - bbox: [x1, y1, x2, y2] coordinates in normalized 0-1000 scale - page: Page number where the field appears (starting from 1)\nCoordinate system: - Use normalized scale 0-1000 for both x and y axes - x1, y1 = top-left corner of bounding box   - x2, y2 = bottom-right corner of bounding box - Ensure x2 > x1 and y2 > y1 - Make bounding boxes tight around the actual text content - If a field spans multiple lines, create a bounding box that encompasses all relevant text </spatial-localization-guidelines>\n<final-instructions> Analyze the extraction results against the source document and provide confidence assessments with spatial localization. Return a JSON object with the following structure based on the attribute type:\nFor SIMPLE attributes:  {\n  \"simple_attribute_name\": {\n    \"confidence\": 0.85,\n    \"bbox\": [100, 200, 300, 250],\n    \"page\": 1\n  }\n}\nFor GROUP attributes (nested object structure):  {\n  \"group_attribute_name\": {\n    \"sub_attribute_1\": {\n      \"confidence\": 0.90,\n      \"bbox\": [150, 300, 250, 320],\n      \"page\": 1\n    },\n    \"sub_attribute_2\": {\n      \"confidence\": 0.75,\n      \"bbox\": [150, 325, 280, 345],\n      \"page\": 1\n    }\n  }\n}\nFor LIST attributes (array of assessed items):  {\n  \"list_attribute_name\": [\n    {\n      \"item_attribute_1\": {\n        \"confidence\": 0.95,\n        \"bbox\": [100, 400, 200, 420],\n        \"page\": 1\n      },\n      \"item_attribute_2\": {\n        \"confidence\": 0.88,\n        \"bbox\": [250, 400, 350, 420],\n        \"page\": 1\n      }\n    },\n    {\n      \"item_attribute_1\": {\n        \"confidence\": 0.92,\n        \"bbox\": [100, 425, 200, 445],\n        \"page\": 1\n      },\n      \"item_attribute_2\": {\n        \"confidence\": 0.70,\n        \"bbox\": [250, 425, 350, 445],\n        \"page\": 1\n      }\n    }\n  ]\n}\nIMPORTANT:   - For LIST attributes like \"Transactions\", assess EACH individual item in the list separately with individual bounding boxes - Each transaction should be assessed as a separate object in the array with its own spatial coordinates - Do NOT provide aggregate assessments for list items - assess each one individually with precise locations - Include assessments AND bounding boxes for ALL attributes present in the extraction results - Match the exact structure of the extracted data - Provide page numbers for all bounding boxes (starting from 1) </final-instructions>\n<<CACHEPOINT>>\n<document-image> {DOCUMENT_IMAGE} </document-image>\n<ocr-text-confidence-results> {OCR_TEXT_CONFIDENCE} </ocr-text-confidence-results>\n<<CACHEPOINT>>\n<attributes-definitions> {ATTRIBUTE_NAMES_AND_DESCRIPTIONS} </attributes-definitions>\n<extraction-results> {EXTRACTION_RESULTS} </extraction-results>"
     },
     "evaluation": {
      "llm_method": {
       "top_p": "0.1",
       "max_tokens": "4096",
       "top_k": "5",
       "task_prompt": "I need to evaluate attribute extraction for a document of class: {DOCUMENT_CLASS}.\n\nFor the attribute named \"{ATTRIBUTE_NAME}\" described as \"{ATTRIBUTE_DESCRIPTION}\":\n- Expected value: {EXPECTED_VALUE}\n- Actual value: {ACTUAL_VALUE}\n\nDo these values match in meaning, taking into account formatting differences, word order, abbreviations, and semantic equivalence?\nProvide your assessment as a JSON with three fields:\n- \"match\": boolean (true if they match, false if not)\n- \"score\": number between 0 and 1 representing the confidence/similarity score\n- \"reason\": brief explanation of your decision\n\nRespond ONLY with the JSON and nothing else. Here's the exact format:\n{\n  \"match\": true or false,\n  \"score\": 0.0 to 1.0,\n  \"reason\": \"Your explanation here\"\n}",
       "temperature": "0.0",
       "model": "us.anthropic.claude-3-haiku-20240307-v1:0",
       "system_prompt": "You are an evaluator that helps determine if the predicted and expected values match for document attribute extraction. You will consider the context and meaning rather than just exact string matching."
      }
     },
     "pricing": [
      {
       "name": "textract/detect_document_text",
       "units": [
        {
         "name": "pages",
         "price": "0.0015"
        }
       ]
      },
      {
       "name": "textract/analyze_document-Layout",
       "units": [
        {
         "name": "pages",
         "price": "0.004"
        }
       ]
      },
      {
       "name": "textract/analyze_document-Signatures",
       "units": [
        {
         "name": "pages",
         "price": "0.0035"
        }
       ]
      },
      {
       "name": "textract/analyze_document-Forms",
       "units": [
        {
         "name": "pages",
         "price": "0.05"
        }
       ]
      },
      {
       "name": "textract/analyze_document-Tables",
       "units": [
        {
         "name": "pages",
         "price": "0.015"
        }
       ]
      },
      {
       "name": "textract/analyze_document-Tables+Forms",
       "units": [
        {
         "name": "pages",
         "price": "0.065"
        }
       ]
      },
      {
       "name": "bedrock/us.amazon.nova-lite-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "6.0E-8"
        },
        {
         "name": "outputTokens",
         "price": "2.4E-7"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "1.5E-8"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "6.0E-8"
        }
       ]
      },
      {
       "name": "bedrock/us.amazon.nova-pro-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "8.0E-7"
        },
        {
         "name": "outputTokens",
         "price": "3.2E-6"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "2.0E-7"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "8.0E-7"
        }
       ]
      },
      {
       "name": "bedrock/us.amazon.nova-premier-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "2.5E-6"
        },
        {
         "name": "outputTokens",
         "price": "1.25E-5"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-3-haiku-20240307-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "2.5E-7"
        },
        {
         "name": "outputTokens",
         "price": "1.25E-6"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-3-5-haiku-20241022-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "8.0E-7"
        },
        {
         "name": "outputTokens",
         "price": "4.0E-6"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "8.0E-8"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "1.0E-6"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-3-5-sonnet-20241022-v2:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "3.0E-6"
        },
        {
         "name": "outputTokens",
         "price": "1.5E-5"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "3.0E-7"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "3.75E-6"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-3-7-sonnet-20250219-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "3.0E-6"
        },
        {
         "name": "outputTokens",
         "price": "1.5E-5"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "3.0E-7"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "3.75E-6"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "3.0E-6"
        },
        {
         "name": "outputTokens",
         "price": "1.5E-5"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "3.0E-7"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "3.75E-6"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0:1m",
       "units": [
        {
         "name": "inputTokens",
         "price": "6.0E-6"
        },
        {
         "name": "outputTokens",
         "price": "2.25E-5"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "6.0E-7"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "7.5E-6"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-opus-4-20250514-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "1.5E-5"
        },
        {
         "name": "outputTokens",
         "price": "7.5E-5"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "1.5E-6"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "1.875E-5"
        }
       ]
      },
      {
       "name": "bedrock/us.anthropic.claude-opus-4-1-20250805-v1:0",
       "units": [
        {
         "name": "inputTokens",
         "price": "1.5E-5"
        },
        {
         "name": "outputTokens",
         "price": "7.5E-5"
        },
        {
         "name": "cacheReadInputTokens",
         "price": "1.5E-6"
        },
        {
         "name": "cacheWriteInputTokens",
         "price": "1.875E-5"
        }
       ]
      },
      {
       "name": "lambda/requests",
       "units": [
        {
         "name": "invocations",
         "price": "2.0E-7"
        }
       ]
      },
      {
       "name": "lambda/duration",
       "units": [
        {
         "name": "gb_seconds",
         "price": "1.66667E-5"
        }
       ]
      }
     ],
     "discovery": {
      "output_format": {
       "sample_json": "{\n    \"document_class\" : \"Form-1040\",\n    \"document_description\" : \"Brief summary of the document\",\n    \"groups\" : [\n        {\n            \"name\" : \"PersonalInformation\",\n            \"description\" : \"Personal information of Tax payer\",\n            \"attributeType\" : \"group\",\n            \"groupAttributes\" : [\n                {\n                    \"name\": \"FirstName\",\n                    \"dataType\" : \"string\",\n                    \"description\" : \"First Name of Taxpayer\"\n                },\n                {\n                    \"name\": \"Age\",\n                    \"dataType\" : \"number\",\n                    \"description\" : \"Age of Taxpayer\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"Dependents\",\n            \"description\" : \"Dependents of taxpayer\",\n            \"attributeType\" : \"list\",\n            \"listItemTemplate\": {\n                \"itemAttributes\" : [\n                    {\n                        \"name\": \"FirstName\",\n                        \"dataType\" : \"string\",\n                        \"description\" : \"Dependent first name\"\n                    },\n                    {\n                        \"name\": \"Age\",\n                        \"dataType\" : \"number\",\n                        \"description\" : \"Dependent Age\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
      },
      "with_ground_truth": {
       "top_p": "0.1",
       "temperature": "1.0",
       "user_prompt": "This image contains unstructured data. Analyze the data line by line using the provided ground truth as reference.                         <GROUND_TRUTH_REFERENCE> {ground_truth_json} </GROUND_TRUTH_REFERENCE> Ground truth reference JSON has the fields we are interested in extracting from the document/image. Use the ground truth to optimize field extraction. Match field names, data types, and groupings from the reference. Image may contain multiple pages, process all pages. Extract all field names including those without values. Do not change the group name and field name from ground truth in the extracted data json. Add field_description field for every field which will contain instruction to LLM to extract the field data from the image/document. Add data_type field for every field.  Add two fields document_class and document_description.  For document_class generate a short name based on the document content like W4, I-9, Paystub.  For document_description generate a description about the document in less than 50 words. If the group repeats and follows table format, update the attributeType as \"list\".                          Do not extract the values. Format the extracted data using the below JSON format: Format the extracted groups and fields using the below JSON format:\n  ",
       "model_id": "us.amazon.nova-pro-v1:0",
       "system_prompt": "You are an expert in processing forms. Extracting data from images and documents. Use provided ground truth data as reference to optimize field extraction and ensure consistency with expected document structure and field definitions.",
       "max_tokens": "10000"
      },
      "without_ground_truth": {
       "top_p": "0.1",
       "temperature": "1.0",
       "user_prompt": "This image contains forms data. Analyze the form line by line. Image may contains multiple pages, process all the pages.  Form may contain multiple name value pair in one line.  Extract all the names in the form including the name value pair which doesn't have value.  Organize them into groups, extract field_name, data_type and field description Field_name should be less than 60 characters, should not have space use '-' instead of space. field_description is a brief description of the field and the location of the field like box number or line number in the form and section of the form. Field_name should be unique within the group. Add two fields document_class and document_description.  For document_class generate a short name based on the document content like W4, I-9, Paystub.  For document_description generate a description about the document in less than 50 words. \nGroup the fields based on the section they are grouped in the form. Group should have attributeType as \"group\". If the group repeats and follows table format, update the attributeType as \"list\". Do not extract the values. Return the extracted data in JSON format. Format the extracted data using the below JSON format: Format the extracted groups and fields using the below JSON format:",
       "model_id": "us.amazon.nova-pro-v1:0",
       "system_prompt": "You are an expert in processing forms. Extracting data from images and documents. Analyze forms line by line to identify field names, data types, and organizational structure. Focus on creating comprehensive blueprints for document processing without extracting actual values.",
       "max_tokens": "10000"
      }
     }
    },
    "ConfigurationTable": {
     "Ref": "EnvironmentConfigurationTableFFC21CA7"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorOCRFunctionLogGroupA3730DF6": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorOCRFunctionServiceRole0DD1F23F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorOCRFunctionServiceRoleDefaultPolicy02FACBEC": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InputBucket3BF8630A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InputBucket3BF8630A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConfigurationTableFFC21CA7",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "textract:DetectDocumentText",
        "textract:AnalyzeDocument"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorOCRFunctionServiceRoleDefaultPolicy02FACBEC",
    "Roles": [
     {
      "Ref": "ProcessorOCRFunctionServiceRole0DD1F23F"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorOCRFunction414FD34F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "8061d4ac68f06ce897946943b18da8af2582cab555f5fdfcefaf38897879a9d7.zip"
    },
    "Environment": {
     "Variables": {
      "METRIC_NAMESPACE": "Pattern3TestStack",
      "MAX_WORKERS": "20",
      "CONFIGURATION_TABLE_NAME": {
       "Ref": "EnvironmentConfigurationTableFFC21CA7"
      },
      "LOG_LEVEL": "INFO",
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb",
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer71ca309aA921E3CC"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "ProcessorOCRFunctionLogGroupA3730DF6"
     }
    },
    "MemorySize": 4096,
    "Role": {
     "Fn::GetAtt": [
      "ProcessorOCRFunctionServiceRole0DD1F23F",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "ProcessorOCRFunctionServiceRoleDefaultPolicy02FACBEC",
    "ProcessorOCRFunctionServiceRole0DD1F23F"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorClassificationFunctionLogGroup5DC4A306": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorClassificationFunctionServiceRole4F674B16": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorClassificationFunctionServiceRoleDefaultPolicy723C6775": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InputBucket3BF8630A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InputBucket3BF8630A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConfigurationTableFFC21CA7",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "sagemaker:InvokeEndpoint",
       "Effect": "Allow",
       "Resource": {
        "Ref": "ClassifierUDOPEndpoint6D9DC658"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorClassificationFunctionServiceRoleDefaultPolicy723C6775",
    "Roles": [
     {
      "Ref": "ProcessorClassificationFunctionServiceRole4F674B16"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorClassificationFunction37BBC4C8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "d5aa3dd06f35c2a38ecdb008526afba475933ecfb80760cf9722df139d9bb6f7.zip"
    },
    "Environment": {
     "Variables": {
      "METRIC_NAMESPACE": "Pattern3TestStack",
      "MAX_WORKERS": "20",
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "SAGEMAKER_ENDPOINT_NAME": {
       "Fn::GetAtt": [
        "ClassifierUDOPEndpoint6D9DC658",
        "EndpointName"
       ]
      },
      "CONFIGURATION_TABLE_NAME": {
       "Ref": "EnvironmentConfigurationTableFFC21CA7"
      },
      "GUARDRAIL_ID_AND_VERSION": "",
      "LOG_LEVEL": "INFO",
      "DOCUMENT_TRACKING_MODE": "dynamodb",
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer43f8950b5A0B891B"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "ProcessorClassificationFunctionLogGroup5DC4A306"
     }
    },
    "MemorySize": 4096,
    "Role": {
     "Fn::GetAtt": [
      "ProcessorClassificationFunctionServiceRole4F674B16",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "ProcessorClassificationFunctionServiceRoleDefaultPolicy723C6775",
    "ProcessorClassificationFunctionServiceRole4F674B16"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorExtractionFunctionLogGroup5CC69589": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorExtractionFunctionServiceRole2CBCF541": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorExtractionFunctionServiceRoleDefaultPolicyBB08B846": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InputBucket3BF8630A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InputBucket3BF8630A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConfigurationTableFFC21CA7",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "bedrock:InvokeModel*",
        "bedrock:GetFoundationModel"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":bedrock:*::foundation-model/amazon.nova-pro-v1:0"
         ]
        ]
       }
      },
      {
       "Action": [
        "bedrock:GetInferenceProfile",
        "bedrock:InvokeModel*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":bedrock:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":inference-profile/us.amazon.nova-pro-v1:0"
         ]
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorExtractionFunctionServiceRoleDefaultPolicyBB08B846",
    "Roles": [
     {
      "Ref": "ProcessorExtractionFunctionServiceRole2CBCF541"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorExtractionFunction19224B4C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ea87a4b1fd888f6e3cda3dc916157fab2e618fa271c1c0d230ef5c944911d726.zip"
    },
    "Environment": {
     "Variables": {
      "EXTRACTION_MODEL_ID": "us.amazon.nova-pro-v1:0",
      "CONFIGURATION_TABLE_NAME": {
       "Ref": "EnvironmentConfigurationTableFFC21CA7"
      },
      "METRIC_NAMESPACE": "Pattern3TestStack",
      "GUARDRAIL_ID_AND_VERSION": "",
      "LOG_LEVEL": "INFO",
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb",
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer808533eb8316373F"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "ProcessorExtractionFunctionLogGroup5CC69589"
     }
    },
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "ProcessorExtractionFunctionServiceRole2CBCF541",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "ProcessorExtractionFunctionServiceRoleDefaultPolicyBB08B846",
    "ProcessorExtractionFunctionServiceRole2CBCF541"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorAssessmentFunctionLogGroup7B40ED24": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorAssessmentFunctionServiceRoleC76E2DE5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorAssessmentFunctionServiceRoleDefaultPolicy432383DA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InputBucket3BF8630A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InputBucket3BF8630A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConfigurationTableFFC21CA7",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "bedrock:InvokeModel*",
        "bedrock:GetFoundationModel"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":bedrock:*::foundation-model/amazon.nova-lite-v1:0"
         ]
        ]
       }
      },
      {
       "Action": [
        "bedrock:GetInferenceProfile",
        "bedrock:InvokeModel*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":bedrock:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":inference-profile/us.amazon.nova-lite-v1:0"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorAssessmentFunctionServiceRoleDefaultPolicy432383DA",
    "Roles": [
     {
      "Ref": "ProcessorAssessmentFunctionServiceRoleC76E2DE5"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorAssessmentFunctionCDD7EE50": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "f479954efa613bd55104b574582b76bdb236ebe2d60a2ae29db6ccd797bb0fc3.zip"
    },
    "Environment": {
     "Variables": {
      "METRIC_NAMESPACE": "Pattern3TestStack",
      "CONFIGURATION_TABLE_NAME": {
       "Ref": "EnvironmentConfigurationTableFFC21CA7"
      },
      "LOG_LEVEL": "INFO",
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb",
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayerb854feae5C5E684D"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "ProcessorAssessmentFunctionLogGroup7B40ED24"
     }
    },
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "ProcessorAssessmentFunctionServiceRoleC76E2DE5",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "ProcessorAssessmentFunctionServiceRoleDefaultPolicy432383DA",
    "ProcessorAssessmentFunctionServiceRoleC76E2DE5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorProcessResultsFunctionLogGroup97482ABB": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorProcessResultsFunctionServiceRole48003B80": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorProcessResultsFunctionServiceRoleDefaultPolicyD6F66386": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InputBucket3BF8630A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InputBucket3BF8630A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorProcessResultsFunctionServiceRoleDefaultPolicyD6F66386",
    "Roles": [
     {
      "Ref": "ProcessorProcessResultsFunctionServiceRole48003B80"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorProcessResultsFunction8FE8FC80": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "a24d5d715127c321122be3fc9c584753edb180da93b69e42d51f51bc07902b22.zip"
    },
    "Environment": {
     "Variables": {
      "METRIC_NAMESPACE": "Pattern3TestStack",
      "LOG_LEVEL": "INFO",
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb",
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer2260994d588C4C0A"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "ProcessorProcessResultsFunctionLogGroup97482ABB"
     }
    },
    "MemorySize": 4096,
    "Role": {
     "Fn::GetAtt": [
      "ProcessorProcessResultsFunctionServiceRole48003B80",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "ProcessorProcessResultsFunctionServiceRoleDefaultPolicyD6F66386",
    "ProcessorProcessResultsFunctionServiceRole48003B80"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorSummarizationFunctionLogGroup7DFE16FD": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorSummarizationFunctionServiceRole3E239093": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorSummarizationFunctionServiceRoleDefaultPolicy3749DACA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InputBucket3BF8630A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InputBucket3BF8630A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OutputBucket7114EB27",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OutputBucket7114EB27",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConfigurationTableFFC21CA7",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "bedrock:InvokeModel*",
        "bedrock:GetFoundationModel"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":bedrock:*::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0"
         ]
        ]
       }
      },
      {
       "Action": [
        "bedrock:GetInferenceProfile",
        "bedrock:InvokeModel*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":bedrock:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorSummarizationFunctionServiceRoleDefaultPolicy3749DACA",
    "Roles": [
     {
      "Ref": "ProcessorSummarizationFunctionServiceRole3E239093"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorSummarizationFunction677B39CB": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "87e1dd6ac8f12c3abaafe5481f0a29ed859ac0c984f6b8ad6facd7e252603021.zip"
    },
    "Environment": {
     "Variables": {
      "METRIC_NAMESPACE": "Pattern3TestStack",
      "CONFIGURATION_TABLE_NAME": {
       "Ref": "EnvironmentConfigurationTableFFC21CA7"
      },
      "GUARDRAIL_ID_AND_VERSION": "",
      "LOG_LEVEL": "INFO",
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb",
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      }
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer2260994d588C4C0A"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "ProcessorSummarizationFunctionLogGroup7DFE16FD"
     }
    },
    "MemorySize": 4096,
    "Role": {
     "Fn::GetAtt": [
      "ProcessorSummarizationFunctionServiceRole3E239093",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "ProcessorSummarizationFunctionServiceRoleDefaultPolicy3749DACA",
    "ProcessorSummarizationFunctionServiceRole3E239093"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorStateMachineLogGroupEEA206EF": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorDocumentProcessingStateMachineRoleE2628647": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "states.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorDocumentProcessingStateMachineRoleDefaultPolicy2315022E": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogDelivery",
        "logs:GetLogDelivery",
        "logs:UpdateLogDelivery",
        "logs:DeleteLogDelivery",
        "logs:ListLogDeliveries",
        "logs:PutResourcePolicy",
        "logs:DescribeResourcePolicies",
        "logs:DescribeLogGroups"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessorOCRFunction414FD34F",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessorOCRFunction414FD34F",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessorClassificationFunction37BBC4C8",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessorClassificationFunction37BBC4C8",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessorExtractionFunction19224B4C",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessorExtractionFunction19224B4C",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessorAssessmentFunctionCDD7EE50",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessorAssessmentFunctionCDD7EE50",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessorProcessResultsFunction8FE8FC80",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessorProcessResultsFunction8FE8FC80",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessorSummarizationFunction677B39CB",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessorSummarizationFunction677B39CB",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorDocumentProcessingStateMachineRoleDefaultPolicy2315022E",
    "Roles": [
     {
      "Ref": "ProcessorDocumentProcessingStateMachineRoleE2628647"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorDocumentProcessingStateMachineE572AD61": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionS3Location": {
     "Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "Key": "dd934969c5e40a0e14c6360ceba488be9febefe16af89087d2ebf5937ead54e6.json"
    },
    "DefinitionSubstitutions": {
     "OCRFunctionArn": {
      "Fn::GetAtt": [
       "ProcessorOCRFunction414FD34F",
       "Arn"
      ]
     },
     "ClassificationFunctionArn": {
      "Fn::GetAtt": [
       "ProcessorClassificationFunction37BBC4C8",
       "Arn"
      ]
     },
     "ExtractionFunctionArn": {
      "Fn::GetAtt": [
       "ProcessorExtractionFunction19224B4C",
       "Arn"
      ]
     },
     "AssessmentFunctionArn": {
      "Fn::GetAtt": [
       "ProcessorAssessmentFunctionCDD7EE50",
       "Arn"
      ]
     },
     "ProcessResultsLambdaArn": {
      "Fn::GetAtt": [
       "ProcessorProcessResultsFunction8FE8FC80",
       "Arn"
      ]
     },
     "IsSummarizationEnabled": "true",
     "IsAssessmentEnabled": "true",
     "SummarizationLambdaArn": {
      "Fn::GetAtt": [
       "ProcessorSummarizationFunction677B39CB",
       "Arn"
      ]
     },
     "OutputBucket": {
      "Ref": "OutputBucket7114EB27"
     }
    },
    "LoggingConfiguration": {
     "Destinations": [
      {
       "CloudWatchLogsLogGroup": {
        "LogGroupArn": {
         "Fn::GetAtt": [
          "ProcessorStateMachineLogGroupEEA206EF",
          "Arn"
         ]
        }
       }
      }
     ],
     "IncludeExecutionData": true,
     "Level": "ALL"
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "ProcessorDocumentProcessingStateMachineRoleE2628647",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "ProcessorDocumentProcessingStateMachineRoleDefaultPolicy2315022E",
    "ProcessorDocumentProcessingStateMachineRoleE2628647"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorQueueProcessorLogGroup4C043267": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorQueueProcessorServiceRole7E551AE5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorQueueProcessorServiceRoleDefaultPolicy631EF7BF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "ProcessorDocumentProcessingStateMachineE572AD61"
       }
      },
      {
       "Action": "dynamodb:*",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentTrackingTable97AE1FE4",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "dynamodb:*",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EnvironmentConcurrencyTableE6976F31",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkingBucketAF106285",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkingBucketAF106285",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "sqs:ReceiveMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:GetQueueUrl",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EnvironmentDocumentQueue95D3B000",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ProcessorQueueProcessorServiceRoleDefaultPolicy631EF7BF",
    "Roles": [
     {
      "Ref": "ProcessorQueueProcessorServiceRole7E551AE5"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorQueueProcessorF002AD81": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "da18a88b2e70026f20dae174c41d9cdf6f50d7743942af9fbbed68eb2a63990b.zip"
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "INFO",
      "STATE_MACHINE_ARN": {
       "Ref": "ProcessorDocumentProcessingStateMachineE572AD61"
      },
      "TRACKING_TABLE": {
       "Ref": "EnvironmentTrackingTable97AE1FE4"
      },
      "CONCURRENCY_TABLE": {
       "Ref": "EnvironmentConcurrencyTableE6976F31"
      },
      "MAX_CONCURRENT": "100",
      "WORKING_BUCKET": {
       "Ref": "WorkingBucketAF106285"
      },
      "DOCUMENT_TRACKING_MODE": "dynamodb"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "comamazonawscdkcdklabsgenaiidpidpcommonlayer2260994d588C4C0A"
     }
    ],
    "LoggingConfig": {
     "LogGroup": {
      "Ref": "ProcessorQueueProcessorLogGroup4C043267"
     }
    },
    "Role": {
     "Fn::GetAtt": [
      "ProcessorQueueProcessorServiceRole7E551AE5",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "ProcessorQueueProcessorServiceRoleDefaultPolicy631EF7BF",
    "ProcessorQueueProcessorServiceRole7E551AE5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorQueueProcessorSqsEventSourcePattern3TestStackEnvironmentDocumentQueue8F5E3877871D614B": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 50,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "EnvironmentDocumentQueue95D3B000",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "ProcessorQueueProcessorF002AD81"
    },
    "FunctionResponseTypes": [
     "ReportBatchItemFailures"
    ],
    "MaximumBatchingWindowInSeconds": 1
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorS3EventRuleF45035FA": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "EventPattern": {
     "source": [
      "aws.s3"
     ],
     "detail-type": [
      "Object Created"
     ],
     "detail": {
      "bucket": {
       "name": [
        {
         "Ref": "InputBucket3BF8630A"
        }
       ]
      }
     }
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "EnvironmentQueueSender29E9D2B0",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorS3EventRuleAllowEventRulePattern3TestStackEnvironmentQueueSender6B1531620F59B5FE": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "EnvironmentQueueSender29E9D2B0",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ProcessorS3EventRuleF45035FA",
      "Arn"
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorWorkflowStateChangeRule5A268BAD": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "EventPattern": {
     "source": [
      "aws.states"
     ],
     "detail-type": [
      "Step Functions Execution Status Change"
     ],
     "detail": {
      "stateMachineArn": [
       {
        "Ref": "ProcessorDocumentProcessingStateMachineE572AD61"
       }
      ],
      "status": [
       "FAILED",
       "TIMED_OUT",
       "ABORTED",
       "SUCCEEDED"
      ]
     }
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "EnvironmentWorkflowTrackerFC27ADDE",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RetryPolicy": {
       "MaximumEventAgeInSeconds": 7200,
       "MaximumRetryAttempts": 3
      }
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ProcessorWorkflowStateChangeRuleAllowEventRulePattern3TestStackEnvironmentWorkflowTracker73498EBF77080C1B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "EnvironmentWorkflowTrackerFC27ADDE",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ProcessorWorkflowStateChangeRule5A268BAD",
      "Arn"
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "comamazonawscdkcdklabsgenaiidpidpcommonlayer71ca309aA921E3CC": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.12"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "d8ec8d1896dea0a7cd745442f8731fa521ce137671cbde1dc52f336e3d2aa8f2.zip"
    },
    "Description": "Lambda Layer containing the idp_common Python package with modules: docs_service, ocr"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "comamazonawscdkcdklabsgenaiidpidpcommonlayer43f8950b5A0B891B": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.12"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "f53a735fcd38913b56b3513aa694841ac7a1bfba856367f8e9081feeb1a5b12c.zip"
    },
    "Description": "Lambda Layer containing the idp_common Python package with modules: classification, docs_service"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "comamazonawscdkcdklabsgenaiidpidpcommonlayer808533eb8316373F": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.12"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "c74eb3438d27492c4ef04834e5d5a027a8b633798444cc88a0634453f097acde.zip"
    },
    "Description": "Lambda Layer containing the idp_common Python package with modules: docs_service, extraction"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "comamazonawscdkcdklabsgenaiidpidpcommonlayerb854feae5C5E684D": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.12"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "df8c4a69331e62d2efe0adb1b575c920529764c927567c9b40fbb8f90b35ff28.zip"
    },
    "Description": "Lambda Layer containing the idp_common Python package with modules: assessment, docs_service"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  }
 },
 "Parameters": {
  "ModelBucketNameParameter": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/idp/pattern3/model/bucketname"
  },
  "ModelObjectKeyParameter": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/idp/pattern3/model/objectkey"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Mappings": {
  "DlcRepositoryAccountMap": {
   "ap-east-1": {
    "value": "871362719292"
   },
   "ap-east-2": {
    "value": "975050140332"
   },
   "ap-northeast-1": {
    "value": "763104351884"
   },
   "ap-northeast-2": {
    "value": "763104351884"
   },
   "ap-south-1": {
    "value": "763104351884"
   },
   "ap-south-2": {
    "value": "772153158452"
   },
   "ap-southeast-1": {
    "value": "763104351884"
   },
   "ap-southeast-2": {
    "value": "763104351884"
   },
   "ap-southeast-3": {
    "value": "907027046896"
   },
   "ap-southeast-4": {
    "value": "457447274322"
   },
   "ap-southeast-6": {
    "value": "633930458069"
   },
   "ca-central-1": {
    "value": "763104351884"
   },
   "cn-north-1": {
    "value": "727897471807"
   },
   "cn-northwest-1": {
    "value": "727897471807"
   },
   "eu-central-1": {
    "value": "763104351884"
   },
   "eu-central-2": {
    "value": "380420809688"
   },
   "eu-north-1": {
    "value": "763104351884"
   },
   "eu-south-1": {
    "value": "692866216735"
   },
   "eu-south-2": {
    "value": "503227376785"
   },
   "eu-west-1": {
    "value": "763104351884"
   },
   "eu-west-2": {
    "value": "763104351884"
   },
   "eu-west-3": {
    "value": "763104351884"
   },
   "eusc-de-east-1": {
    "value": "204133271717"
   },
   "me-central-1": {
    "value": "914824155844"
   },
   "me-south-1": {
    "value": "217643126080"
   },
   "sa-east-1": {
    "value": "763104351884"
   },
   "us-east-1": {
    "value": "763104351884"
   },
   "us-east-2": {
    "value": "763104351884"
   },
   "us-west-1": {
    "value": "763104351884"
   },
   "us-west-2": {
    "value": "763104351884"
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}