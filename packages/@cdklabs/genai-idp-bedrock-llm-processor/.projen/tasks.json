{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "@cdklabs/genai-idp-bedrock-llm-processor@",
        "VERSIONRCOPTIONS": "{\"path\":\".\"}",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\" -- ."
      },
      "steps": [
        {
          "spawn": "gather-versions"
        },
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "bundle": {
      "name": "bundle",
      "steps": [
        {
          "spawn": "bundle:lambda:assessment_function"
        },
        {
          "spawn": "bundle:lambda:classification_function"
        },
        {
          "spawn": "bundle:lambda:extraction_function"
        },
        {
          "spawn": "bundle:lambda:hitl-process-function"
        },
        {
          "spawn": "bundle:lambda:hitl-status-update-function"
        },
        {
          "spawn": "bundle:lambda:hitl-wait-function"
        },
        {
          "spawn": "bundle:lambda:ocr_function"
        },
        {
          "spawn": "bundle:lambda:processresults_function"
        },
        {
          "spawn": "bundle:lambda:summarization_function"
        },
        {
          "spawn": "bundle:config:bank-statement-sample"
        },
        {
          "spawn": "bundle:config:criteria-validation"
        },
        {
          "spawn": "bundle:config:lending-package-sample"
        },
        {
          "spawn": "bundle:config:rvl-cdip-package-sample"
        },
        {
          "spawn": "bundle:config:rvl-cdip-package-sample-with-few-shot-examples"
        },
        {
          "spawn": "bundle:state-machine"
        },
        {
          "spawn": "bundle:schema"
        }
      ]
    },
    "bundle:config:bank-statement-sample": {
      "name": "bundle:config:bank-statement-sample",
      "steps": [
        {
          "exec": "mkdir -p assets/configs/bank-statement-sample"
        },
        {
          "exec": "rsync -rLct ../../../sources/config_library/pattern-2/bank-statement-sample/config.yaml assets/configs/bank-statement-sample/."
        }
      ]
    },
    "bundle:config:criteria-validation": {
      "name": "bundle:config:criteria-validation",
      "steps": [
        {
          "exec": "mkdir -p assets/configs/criteria-validation"
        },
        {
          "exec": "rsync -rLct ../../../sources/config_library/pattern-2/criteria-validation/config.yaml assets/configs/criteria-validation/."
        }
      ]
    },
    "bundle:config:lending-package-sample": {
      "name": "bundle:config:lending-package-sample",
      "steps": [
        {
          "exec": "mkdir -p assets/configs/lending-package-sample"
        },
        {
          "exec": "rsync -rLct ../../../sources/config_library/pattern-2/lending-package-sample/config.yaml assets/configs/lending-package-sample/."
        }
      ]
    },
    "bundle:config:rvl-cdip-package-sample": {
      "name": "bundle:config:rvl-cdip-package-sample",
      "steps": [
        {
          "exec": "mkdir -p assets/configs/rvl-cdip-package-sample"
        },
        {
          "exec": "rsync -rLct ../../../sources/config_library/pattern-2/rvl-cdip-package-sample/config.yaml assets/configs/rvl-cdip-package-sample/."
        }
      ]
    },
    "bundle:config:rvl-cdip-package-sample-with-few-shot-examples": {
      "name": "bundle:config:rvl-cdip-package-sample-with-few-shot-examples",
      "steps": [
        {
          "exec": "mkdir -p assets/configs/rvl-cdip-package-sample-with-few-shot-examples"
        },
        {
          "exec": "rsync -rLct ../../../sources/config_library/pattern-2/rvl-cdip-package-sample-with-few-shot-examples/config.yaml assets/configs/rvl-cdip-package-sample-with-few-shot-examples/."
        }
      ]
    },
    "bundle:lambda:assessment_function": {
      "name": "bundle:lambda:assessment_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/assessment_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/assessment_function/* assets/lambdas/assessment_function/."
        }
      ]
    },
    "bundle:lambda:classification_function": {
      "name": "bundle:lambda:classification_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/classification_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/classification_function/* assets/lambdas/classification_function/."
        }
      ]
    },
    "bundle:lambda:extraction_function": {
      "name": "bundle:lambda:extraction_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/extraction_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/extraction_function/* assets/lambdas/extraction_function/."
        }
      ]
    },
    "bundle:lambda:hitl-process-function": {
      "name": "bundle:lambda:hitl-process-function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/hitl-process-function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/hitl-process-function/* assets/lambdas/hitl-process-function/."
        }
      ]
    },
    "bundle:lambda:hitl-status-update-function": {
      "name": "bundle:lambda:hitl-status-update-function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/hitl-status-update-function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/hitl-status-update-function/* assets/lambdas/hitl-status-update-function/."
        }
      ]
    },
    "bundle:lambda:hitl-wait-function": {
      "name": "bundle:lambda:hitl-wait-function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/hitl-wait-function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/hitl-wait-function/* assets/lambdas/hitl-wait-function/."
        }
      ]
    },
    "bundle:lambda:ocr_function": {
      "name": "bundle:lambda:ocr_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/ocr_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/ocr_function/* assets/lambdas/ocr_function/."
        }
      ]
    },
    "bundle:lambda:processresults_function": {
      "name": "bundle:lambda:processresults_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/processresults_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/processresults_function/* assets/lambdas/processresults_function/."
        }
      ]
    },
    "bundle:lambda:summarization_function": {
      "name": "bundle:lambda:summarization_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/summarization_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/src/summarization_function/* assets/lambdas/summarization_function/."
        }
      ]
    },
    "bundle:schema": {
      "name": "bundle:schema",
      "steps": [
        {
          "exec": "mkdir -p assets/schema"
        },
        {
          "exec": "rsync -rLct ../../../schemas/pattern-2/schema.json assets/schema/."
        }
      ]
    },
    "bundle:state-machine": {
      "name": "bundle:state-machine",
      "steps": [
        {
          "exec": "mkdir -p assets/sfn"
        },
        {
          "exec": "rsync -rLct ../../../sources/patterns/pattern-2/statemachine/workflow.asl.json assets/sfn/."
        }
      ]
    },
    "check-for-updates": {
      "name": "check-for-updates",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@aws-cdk/cx-api,@types/jest,@types/node,cdk-nag,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,jest,jsii-diff,jsii-docgen,jsii-pacmak,prettier,ts-jest,ts-node,typescript"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word -c ./tsconfig.json"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "cd ../../.. && npx projen default"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools",
          "receiveArgs": true
        }
      ]
    },
    "gather-versions": {
      "name": "gather-versions",
      "steps": [
        {
          "exec": "node -e \"require(require.resolve('cdklabs-projen-project-types/lib/yarn/gather-versions.exec.js')).cliMain()\" @cdklabs/genai-idp=future-minor",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ:pattern:assert": {
      "name": "integ:pattern:assert",
      "description": "assert the snapshot of integration test 'pattern'",
      "steps": [
        {
          "exec": "[ -d \"test/integ/pattern.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'pattern'. Run 'projen integ:pattern:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/integ/pattern.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/integ/.tmp/pattern.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/integ/pattern.integ.snapshot/ test/integ/.tmp/pattern.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:pattern:deploy": {
      "name": "integ:pattern:deploy",
      "description": "deploy integration test 'pattern' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/integ/.tmp/pattern.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/integ/pattern.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/integ/.tmp/pattern.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/integ/pattern.integ.snapshot"
        },
        {
          "exec": "mv test/integ/.tmp/pattern.integ/deploy.cdk.out test/integ/pattern.integ.snapshot"
        },
        {
          "spawn": "integ:pattern:destroy"
        }
      ]
    },
    "integ:pattern:destroy": {
      "name": "integ:pattern:destroy",
      "description": "destroy integration test 'pattern'",
      "steps": [
        {
          "exec": "cdk destroy --app test/integ/pattern.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:pattern:snapshot": {
      "name": "integ:pattern:snapshot",
      "description": "update snapshot for integration test \"pattern\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/integ/pattern.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata -o test/integ/pattern.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:pattern:watch": {
      "name": "integ:pattern:watch",
      "description": "watch integration test 'pattern' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/integ/pattern.integ.ts\" --no-notices --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/integ/.tmp/pattern.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:snapshot-all": {
      "name": "integ:snapshot-all",
      "description": "update snapshot for all integration tests",
      "steps": [
        {
          "spawn": "integ:pattern:snapshot"
        }
      ]
    },
    "mkdocs:doccopy": {
      "name": "mkdocs:doccopy",
      "steps": [
        {
          "exec": "mkdir -p ../../../docs/content/api-reference"
        },
        {
          "exec": "echo \"# @cdklabs/genai-idp-bedrock-llm-processor\" > ../../../docs/content/api-reference/genai-idp-bedrock-llm-processor-api.md"
        },
        {
          "exec": "tail -n +2 API.md >> ../../../docs/content/api-reference/genai-idp-bedrock-llm-processor-api.md"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "spawn": "package-all"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:python"
        },
        {
          "spawn": "package:dotnet"
        }
      ]
    },
    "package:dotnet": {
      "name": "package:dotnet",
      "description": "Create dotnet language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target dotnet"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        },
        {
          "spawn": "mkdocs:doccopy"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "bundle"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:pattern:assert"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "@cdklabs/genai-idp-bedrock-llm-processor@",
        "VERSIONRCOPTIONS": "{\"path\":\".\"}",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\" -- ."
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        },
        {
          "spawn": "gather-versions",
          "env": {
            "RESET_VERSIONS": "true"
          }
        },
        {
          "exec": "node -e \"const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8')); if (pkg.devDependencies && pkg.devDependencies['@cdklabs/genai-idp']) { pkg.devDependencies['@cdklabs/genai-idp'] = '0.0.0'; } fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n');\""
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word -c ./tsconfig.json"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
