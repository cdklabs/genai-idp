{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "@cdklabs/genai-idp@",
        "VERSIONRCOPTIONS": "{\"path\":\".\"}",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\" -- ."
      },
      "steps": [
        {
          "spawn": "gather-versions"
        },
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "bundle": {
      "name": "bundle",
      "steps": [
        {
          "spawn": "bundle:lambdas:lib"
        },
        {
          "spawn": "bundle:handler:agent_processor"
        },
        {
          "spawn": "bundle:handler:agent_request_handler"
        },
        {
          "spawn": "bundle:handler:chat_with_document_resolver"
        },
        {
          "spawn": "bundle:handler:cognito_updater_hitl"
        },
        {
          "spawn": "bundle:handler:configuration_resolver"
        },
        {
          "spawn": "bundle:handler:copy_to_baseline_resolver"
        },
        {
          "spawn": "bundle:handler:create_a2i_resources"
        },
        {
          "spawn": "bundle:handler:create_document_resolver"
        },
        {
          "spawn": "bundle:handler:dashboard_merger"
        },
        {
          "spawn": "bundle:handler:delete_document_resolver"
        },
        {
          "spawn": "bundle:handler:evaluation_function"
        },
        {
          "spawn": "bundle:handler:get-workforce-url"
        },
        {
          "spawn": "bundle:handler:get_file_contents_resolver"
        },
        {
          "spawn": "bundle:handler:get_stepfunction_execution_resolver"
        },
        {
          "spawn": "bundle:handler:initialize_counter"
        },
        {
          "spawn": "bundle:handler:ipset_updater"
        },
        {
          "spawn": "bundle:handler:list_available_agents"
        },
        {
          "spawn": "bundle:handler:lookup_function"
        },
        {
          "spawn": "bundle:handler:publish_stepfunction_update_resolver"
        },
        {
          "spawn": "bundle:handler:query_knowledgebase_resolver"
        },
        {
          "spawn": "bundle:handler:queue_processor"
        },
        {
          "spawn": "bundle:handler:queue_sender"
        },
        {
          "spawn": "bundle:handler:reprocess_document_resolver"
        },
        {
          "spawn": "bundle:handler:save_reporting_data"
        },
        {
          "spawn": "bundle:handler:start_codebuild"
        },
        {
          "spawn": "bundle:handler:stepfunction_subscription_publisher"
        },
        {
          "spawn": "bundle:handler:update_configuration"
        },
        {
          "spawn": "bundle:handler:update_settings"
        },
        {
          "spawn": "bundle:handler:upload_resolver"
        },
        {
          "spawn": "bundle:handler:workflow_tracker"
        },
        {
          "spawn": "bundle:appsync:env-api"
        },
        {
          "spawn": "bundle:webapp:ui"
        }
      ]
    },
    "bundle:appsync:env-api": {
      "name": "bundle:appsync:env-api",
      "steps": [
        {
          "exec": "mkdir -p assets/appsync/env-api"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/api/schema.graphql assets/appsync/env-api/."
        }
      ]
    },
    "bundle:handler:agent_processor": {
      "name": "bundle:handler:agent_processor",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/agent_processor"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/agent_processor/ assets/lambdas/agent_processor/."
        }
      ]
    },
    "bundle:handler:agent_request_handler": {
      "name": "bundle:handler:agent_request_handler",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/agent_request_handler"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/agent_request_handler/ assets/lambdas/agent_request_handler/."
        }
      ]
    },
    "bundle:handler:chat_with_document_resolver": {
      "name": "bundle:handler:chat_with_document_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/chat_with_document_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/chat_with_document_resolver/ assets/lambdas/chat_with_document_resolver/."
        }
      ]
    },
    "bundle:handler:cognito_updater_hitl": {
      "name": "bundle:handler:cognito_updater_hitl",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/cognito_updater_hitl"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/cognito_updater_hitl/ assets/lambdas/cognito_updater_hitl/."
        }
      ]
    },
    "bundle:handler:configuration_resolver": {
      "name": "bundle:handler:configuration_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/configuration_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/configuration_resolver/ assets/lambdas/configuration_resolver/."
        }
      ]
    },
    "bundle:handler:copy_to_baseline_resolver": {
      "name": "bundle:handler:copy_to_baseline_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/copy_to_baseline_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/copy_to_baseline_resolver/ assets/lambdas/copy_to_baseline_resolver/."
        }
      ]
    },
    "bundle:handler:create_a2i_resources": {
      "name": "bundle:handler:create_a2i_resources",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/create_a2i_resources"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/create_a2i_resources/ assets/lambdas/create_a2i_resources/."
        }
      ]
    },
    "bundle:handler:create_document_resolver": {
      "name": "bundle:handler:create_document_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/create_document_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/create_document_resolver/ assets/lambdas/create_document_resolver/."
        }
      ]
    },
    "bundle:handler:dashboard_merger": {
      "name": "bundle:handler:dashboard_merger",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/dashboard_merger"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/dashboard_merger/ assets/lambdas/dashboard_merger/."
        }
      ]
    },
    "bundle:handler:delete_document_resolver": {
      "name": "bundle:handler:delete_document_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/delete_document_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/delete_document_resolver/ assets/lambdas/delete_document_resolver/."
        }
      ]
    },
    "bundle:handler:evaluation_function": {
      "name": "bundle:handler:evaluation_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/evaluation_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/evaluation_function/ assets/lambdas/evaluation_function/."
        }
      ]
    },
    "bundle:handler:get_file_contents_resolver": {
      "name": "bundle:handler:get_file_contents_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/get_file_contents_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/get_file_contents_resolver/ assets/lambdas/get_file_contents_resolver/."
        }
      ]
    },
    "bundle:handler:get_stepfunction_execution_resolver": {
      "name": "bundle:handler:get_stepfunction_execution_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/get_stepfunction_execution_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/get_stepfunction_execution_resolver/ assets/lambdas/get_stepfunction_execution_resolver/."
        }
      ]
    },
    "bundle:handler:get-workforce-url": {
      "name": "bundle:handler:get-workforce-url",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/get-workforce-url"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/get-workforce-url/ assets/lambdas/get-workforce-url/."
        }
      ]
    },
    "bundle:handler:initialize_counter": {
      "name": "bundle:handler:initialize_counter",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/initialize_counter"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/initialize_counter/ assets/lambdas/initialize_counter/."
        }
      ]
    },
    "bundle:handler:ipset_updater": {
      "name": "bundle:handler:ipset_updater",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/ipset_updater"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/ipset_updater/ assets/lambdas/ipset_updater/."
        }
      ]
    },
    "bundle:handler:list_available_agents": {
      "name": "bundle:handler:list_available_agents",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/list_available_agents"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/list_available_agents/ assets/lambdas/list_available_agents/."
        }
      ]
    },
    "bundle:handler:lookup_function": {
      "name": "bundle:handler:lookup_function",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/lookup_function"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/lookup_function/ assets/lambdas/lookup_function/."
        }
      ]
    },
    "bundle:handler:publish_stepfunction_update_resolver": {
      "name": "bundle:handler:publish_stepfunction_update_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/publish_stepfunction_update_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/publish_stepfunction_update_resolver/ assets/lambdas/publish_stepfunction_update_resolver/."
        }
      ]
    },
    "bundle:handler:query_knowledgebase_resolver": {
      "name": "bundle:handler:query_knowledgebase_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/query_knowledgebase_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/query_knowledgebase_resolver/ assets/lambdas/query_knowledgebase_resolver/."
        }
      ]
    },
    "bundle:handler:queue_processor": {
      "name": "bundle:handler:queue_processor",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/queue_processor"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/queue_processor/ assets/lambdas/queue_processor/."
        }
      ]
    },
    "bundle:handler:queue_sender": {
      "name": "bundle:handler:queue_sender",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/queue_sender"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/queue_sender/ assets/lambdas/queue_sender/."
        }
      ]
    },
    "bundle:handler:reprocess_document_resolver": {
      "name": "bundle:handler:reprocess_document_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/reprocess_document_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/reprocess_document_resolver/ assets/lambdas/reprocess_document_resolver/."
        }
      ]
    },
    "bundle:handler:save_reporting_data": {
      "name": "bundle:handler:save_reporting_data",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/save_reporting_data"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/save_reporting_data/ assets/lambdas/save_reporting_data/."
        }
      ]
    },
    "bundle:handler:start_codebuild": {
      "name": "bundle:handler:start_codebuild",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/start_codebuild"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/start_codebuild/ assets/lambdas/start_codebuild/."
        }
      ]
    },
    "bundle:handler:stepfunction_subscription_publisher": {
      "name": "bundle:handler:stepfunction_subscription_publisher",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/stepfunction_subscription_publisher"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/stepfunction_subscription_publisher/ assets/lambdas/stepfunction_subscription_publisher/."
        }
      ]
    },
    "bundle:handler:update_configuration": {
      "name": "bundle:handler:update_configuration",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/update_configuration"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/update_configuration/ assets/lambdas/update_configuration/."
        }
      ]
    },
    "bundle:handler:update_settings": {
      "name": "bundle:handler:update_settings",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/update_settings"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/update_settings/ assets/lambdas/update_settings/."
        }
      ]
    },
    "bundle:handler:upload_resolver": {
      "name": "bundle:handler:upload_resolver",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/upload_resolver"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/upload_resolver/ assets/lambdas/upload_resolver/."
        }
      ]
    },
    "bundle:handler:workflow_tracker": {
      "name": "bundle:handler:workflow_tracker",
      "steps": [
        {
          "exec": "mkdir -p assets/lambdas/workflow_tracker"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/lambda/workflow_tracker/ assets/lambdas/workflow_tracker/."
        }
      ]
    },
    "bundle:lambdas:lib": {
      "name": "bundle:lambdas:lib",
      "steps": [
        {
          "exec": "mkdir -p assets/lib"
        },
        {
          "exec": "rsync -rLct ../../../sources/lib/ assets/lib/."
        }
      ]
    },
    "bundle:webapp:ui": {
      "name": "bundle:webapp:ui",
      "steps": [
        {
          "exec": "mkdir -p assets/webapp/ui"
        },
        {
          "exec": "rsync -rLct ../../../sources/src/ui/ assets/webapp/ui/."
        }
      ]
    },
    "check-for-updates": {
      "name": "check-for-updates",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@aws-cdk/cx-api,@types/jest,@types/node,cdk-nag,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,jest,jsii-diff,jsii-docgen,jsii-pacmak,prettier,ts-jest,typescript,yaml"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word -c ./tsconfig.json"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "cd ../../.. && npx projen default"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools",
          "receiveArgs": true
        }
      ]
    },
    "gather-versions": {
      "name": "gather-versions",
      "steps": [
        {
          "exec": "node -e \"require(require.resolve('cdklabs-projen-project-types/lib/yarn/gather-versions.exec.js')).cliMain()\" ",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "spawn": "package-all"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:python"
        },
        {
          "spawn": "package:dotnet"
        }
      ]
    },
    "package:dotnet": {
      "name": "package:dotnet",
      "description": "Create dotnet language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target dotnet"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "bundle"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "@cdklabs/genai-idp@",
        "VERSIONRCOPTIONS": "{\"path\":\".\"}",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\" -- ."
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        },
        {
          "spawn": "gather-versions",
          "env": {
            "RESET_VERSIONS": "true"
          }
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word -c ./tsconfig.json"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
