// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
import type { aws_dynamodb, aws_iam, aws_kinesis, aws_kms, Duration, RemovalPolicy } from 'aws-cdk-lib';

/**
 * Properties for a DynamoDB Table that has a predefined, fixed partitionKey, sortKey, and timeToLiveAttribute
 */
export interface FixedKeyTableProps {
  /**
   * Enforces a particular physical table name.
   * @default <generated>
   * @stability stable
   */
  readonly tableName?: string;
  /**
   * Kinesis Data Stream to capture item-level changes for the table.
   * @default - no Kinesis Data Stream
   * @stability stable
   */
  readonly kinesisStream?: aws_kinesis.IStream;
  /**
   * Kinesis Data Stream approximate creation timestamp precision.
   * @default ApproximateCreationDateTimePrecision.MICROSECOND
   * @stability stable
   */
  readonly kinesisPrecisionTimestamp?: aws_dynamodb.ApproximateCreationDateTimePrecision;
  /**
   * The write capacity for the table.
   * Careful if you add Global Secondary Indexes, as
   * those will share the table's provisioned throughput.
   *
   * Can only be provided if billingMode is Provisioned.
   * @default 5
   * @stability stable
   */
  readonly writeCapacity?: number;
  /**
   * Specify values to pre-warm you DynamoDB Table Warm Throughput feature is not available for Global Table replicas using the `Table` construct.
   * To enable Warm Throughput, use the `TableV2` construct instead.
   * @default - warm throughput is not configured
   * @stability stable
   */
  readonly warmThroughput?: aws_dynamodb.WarmThroughput;
  /**
   * [WARNING: Use this flag with caution, misusing this flag may cause deleting existing replicas, refer to the detailed documentation for more information] Indicates whether CloudFormation stack waits for replication to finish.
   * If set to false, the CloudFormation resource will mark the resource as
   * created and replication will be completed asynchronously. This property is
   * ignored if replicationRegions property is not set.
   *
   * WARNING:
   * DO NOT UNSET this property if adding/removing multiple replicationRegions
   * in one deployment, as CloudFormation only supports one region replication
   * at a time. CDK overcomes this limitation by waiting for replication to
   * finish before starting new replicationRegion.
   *
   * If the custom resource which handles replication has a physical resource
   * ID with the format `region` instead of `tablename-region` (this would happen
   * if the custom resource hasn't received an event since v1.91.0), DO NOT SET
   * this property to false without making a change to the table name.
   * This will cause the existing replicas to be deleted.
   * @default true
   * @stability stable
   */
  readonly waitForReplicationToFinish?: boolean;
  /**
   * Specify the table class.
   * @default STANDARD
   * @stability stable
   */
  readonly tableClass?: aws_dynamodb.TableClass;
  /**
   * When an item in the table is modified, StreamViewType determines what information is written to the stream for this table.
   * @default - streams are disabled unless `replicationRegions` is specified
   * @stability stable
   */
  readonly stream?: aws_dynamodb.StreamViewType;
  /**
   * Resource policy to assign to table.
   * @default - No resource policy statement
   * @stability stable
   */
  readonly resourcePolicy?: aws_iam.PolicyDocument;
  /**
   * The timeout for a table replication operation in a single region.
   * @default Duration.minutes(30)
   * @stability stable
   */
  readonly replicationTimeout?: Duration;
  /**
   * Regions where replica tables will be created.
   * @default - no replica tables are created
   * @stability stable
   */
  readonly replicationRegions?: Array<string>;
  /**
   * The removal policy to apply to the DynamoDB replica tables.
   * @default undefined - use DynamoDB Table's removal policy
   * @stability stable
   */
  readonly replicaRemovalPolicy?: RemovalPolicy;
  /**
   * The removal policy to apply to the DynamoDB Table.
   * @default RemovalPolicy.RETAIN
   * @stability stable
   */
  readonly removalPolicy?: RemovalPolicy;
  /**
   * The read capacity for the table.
   * Careful if you add Global Secondary Indexes, as
   * those will share the table's provisioned throughput.
   *
   * Can only be provided if billingMode is Provisioned.
   * @default 5
   * @stability stable
   */
  readonly readCapacity?: number;
  /**
   * Whether point-in-time recovery is enabled and recoveryPeriodInDays is set.
   * @default - point in time recovery is not enabled.
   * @stability stable
   */
  readonly pointInTimeRecoverySpecification?: aws_dynamodb.PointInTimeRecoverySpecification;
  /**
   * Whether point-in-time recovery is enabled.
   * @default false - point in time recovery is not enabled.
   * @deprecated use `pointInTimeRecoverySpecification` instead
   * @stability deprecated
   */
  readonly pointInTimeRecovery?: boolean;
  /**
   * The write request units for the table.
   * Careful if you add Global Secondary Indexes, as
   * those will share the table's maximum on-demand throughput.
   *
   * Can only be provided if billingMode is PAY_PER_REQUEST.
   * @default - on-demand throughput is disabled
   * @stability stable
   */
  readonly maxWriteRequestUnits?: number;
  /**
   * The maximum read request units for the table.
   * Careful if you add Global Secondary Indexes, as
   * those will share the table's maximum on-demand throughput.
   *
   * Can only be provided if billingMode is PAY_PER_REQUEST.
   * @default - on-demand throughput is disabled
   * @stability stable
   */
  readonly maxReadRequestUnits?: number;
  /**
   * The properties of data being imported from the S3 bucket source to the table.
   * @default - no data import from the S3 bucket
   * @stability stable
   */
  readonly importSource?: aws_dynamodb.ImportSourceSpecification;
  /**
   * External KMS key to use for table encryption.
   * This property can only be set if `encryption` is set to `TableEncryption.CUSTOMER_MANAGED`.
   * @default - If `encryption` is set to `TableEncryption.CUSTOMER_MANAGED` and this
property is undefined, a new KMS key will be created and associated with this table.
If `encryption` and this property are both undefined, then the table is encrypted with
an encryption key managed by DynamoDB, and you are not charged any fee for using it.
   * @stability stable
   */
  readonly encryptionKey?: aws_kms.IKey;
  /**
   * Whether server-side encryption with an AWS managed customer master key is enabled.
   * This property cannot be set if `serverSideEncryption` is set.
   *
   * > **NOTE**: if you set this to `CUSTOMER_MANAGED` and `encryptionKey` is not
   * > specified, the key that the Tablet generates for you will be created with
   * > default permissions. If you are using CDKv2, these permissions will be
   * > sufficient to enable the key for use with DynamoDB tables.  If you are
   * > using CDKv1, make sure the feature flag
   * > `@aws-cdk/aws-kms:defaultKeyPolicies` is set to `true` in your `cdk.json`.
   * @default - The table is encrypted with an encryption key managed by DynamoDB, and you are not charged any fee for using it.
   * @stability stable
   */
  readonly encryption?: aws_dynamodb.TableEncryption;
  /**
   * Enables deletion protection for the table.
   * @default false
   * @stability stable
   */
  readonly deletionProtection?: boolean;
  /**
   * Whether CloudWatch contributor insights is enabled and what mode is selected.
   * @default - contributor insights is not enabled
   * @stability stable
   */
  readonly contributorInsightsSpecification?: aws_dynamodb.ContributorInsightsSpecification;
  /**
   * Whether CloudWatch contributor insights is enabled.
   * @default false
   * @deprecated use `contributorInsightsSpecification instead
   * @stability deprecated
   */
  readonly contributorInsightsEnabled?: boolean;
  /**
   * Specify how you are charged for read and write throughput and how you manage capacity.
   * @default PROVISIONED if `replicationRegions` is not specified, PAY_PER_REQUEST otherwise
   * @stability stable
   */
  readonly billingMode?: aws_dynamodb.BillingMode;
}
